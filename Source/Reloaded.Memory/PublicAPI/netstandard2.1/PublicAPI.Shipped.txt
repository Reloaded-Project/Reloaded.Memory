abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.Peek(out double value) -> void
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.Peek(out float value) -> void
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.Peek(out int value) -> void
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.Peek(out long value) -> void
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.Peek(out short value) -> void
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.Peek(out uint value) -> void
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.Peek(out ulong value) -> void
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.Peek(out ushort value) -> void
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.Peek<T>() -> T
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.Peek<T>(out T value) -> void
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.PeekDouble() -> double
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.PeekInt16() -> short
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.PeekInt32() -> int
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.PeekInt64() -> long
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.PeekSingle() -> float
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.PeekUInt16() -> ushort
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.PeekUInt32() -> uint
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.PeekUInt64() -> ulong
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.Read(out double value) -> void
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.Read(out float value) -> void
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.Read(out int value) -> void
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.Read(out long value) -> void
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.Read(out short value) -> void
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.Read(out uint value) -> void
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.Read(out ulong value) -> void
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.Read(out ushort value) -> void
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.Read<T>() -> T
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.Read<T>(out T value) -> void
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.ReadDouble() -> double
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.ReadInt16() -> short
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.ReadInt32() -> int
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.ReadInt64() -> long
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.ReadSingle() -> float
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.ReadUInt16() -> ushort
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.ReadUInt32() -> uint
abstract Reloaded.Memory.Streams.Readers.EndianStreamReader.ReadUInt64() -> ulong
abstract Reloaded.Memory.Streams.Writers.EndianMemoryStream.Write<T>(T structure) -> void
abstract Reloaded.Memory.Streams.Writers.EndianMemoryStream.Write<T>(T[] structure) -> void
abstract Reloaded.Memory.Streams.Writers.EndianMemoryStream.WriteDouble(double data) -> void
abstract Reloaded.Memory.Streams.Writers.EndianMemoryStream.WriteInt16(short data) -> void
abstract Reloaded.Memory.Streams.Writers.EndianMemoryStream.WriteInt32(int data) -> void
abstract Reloaded.Memory.Streams.Writers.EndianMemoryStream.WriteInt64(long data) -> void
abstract Reloaded.Memory.Streams.Writers.EndianMemoryStream.WriteSingle(float data) -> void
abstract Reloaded.Memory.Streams.Writers.EndianMemoryStream.WriteUInt16(ushort data) -> void
abstract Reloaded.Memory.Streams.Writers.EndianMemoryStream.WriteUInt32(uint data) -> void
abstract Reloaded.Memory.Streams.Writers.EndianMemoryStream.WriteUInt64(ulong data) -> void
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.Peek(out double value) -> void
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.Peek(out float value) -> void
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.Peek(out int value) -> void
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.Peek(out long value) -> void
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.Peek(out short value) -> void
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.Peek(out uint value) -> void
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.Peek(out ulong value) -> void
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.Peek(out ushort value) -> void
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.Peek<T>() -> T
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.Peek<T>(out T value) -> void
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.PeekDouble() -> double
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.PeekInt16() -> short
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.PeekInt32() -> int
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.PeekInt64() -> long
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.PeekSingle() -> float
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.PeekUInt16() -> ushort
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.PeekUInt32() -> uint
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.PeekUInt64() -> ulong
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.Read(out double value) -> void
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.Read(out float value) -> void
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.Read(out int value) -> void
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.Read(out long value) -> void
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.Read(out short value) -> void
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.Read(out uint value) -> void
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.Read(out ulong value) -> void
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.Read(out ushort value) -> void
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.Read<T>() -> T
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.Read<T>(out T value) -> void
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.ReadDouble() -> double
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.ReadInt16() -> short
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.ReadInt32() -> int
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.ReadInt64() -> long
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.ReadSingle() -> float
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.ReadUInt16() -> ushort
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.ReadUInt32() -> uint
override Reloaded.Memory.Streams.Readers.BigEndianStreamReader.ReadUInt64() -> ulong
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.Peek(out double value) -> void
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.Peek(out float value) -> void
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.Peek(out int value) -> void
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.Peek(out long value) -> void
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.Peek(out short value) -> void
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.Peek(out uint value) -> void
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.Peek(out ulong value) -> void
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.Peek(out ushort value) -> void
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.Peek<T>() -> T
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.Peek<T>(out T value) -> void
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.PeekDouble() -> double
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.PeekInt16() -> short
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.PeekInt32() -> int
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.PeekInt64() -> long
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.PeekSingle() -> float
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.PeekUInt16() -> ushort
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.PeekUInt32() -> uint
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.PeekUInt64() -> ulong
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.Read(out double value) -> void
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.Read(out float value) -> void
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.Read(out int value) -> void
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.Read(out long value) -> void
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.Read(out short value) -> void
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.Read(out uint value) -> void
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.Read(out ulong value) -> void
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.Read(out ushort value) -> void
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.Read<T>() -> T
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.Read<T>(out T value) -> void
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.ReadDouble() -> double
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.ReadInt16() -> short
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.ReadInt32() -> int
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.ReadInt64() -> long
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.ReadSingle() -> float
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.ReadUInt16() -> ushort
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.ReadUInt32() -> uint
override Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.ReadUInt64() -> ulong
override Reloaded.Memory.Streams.Writers.BigEndianMemoryStream.Write<T>(T structure) -> void
override Reloaded.Memory.Streams.Writers.BigEndianMemoryStream.Write<T>(T[] structure) -> void
override Reloaded.Memory.Streams.Writers.BigEndianMemoryStream.WriteDouble(double data) -> void
override Reloaded.Memory.Streams.Writers.BigEndianMemoryStream.WriteInt16(short data) -> void
override Reloaded.Memory.Streams.Writers.BigEndianMemoryStream.WriteInt32(int data) -> void
override Reloaded.Memory.Streams.Writers.BigEndianMemoryStream.WriteInt64(long data) -> void
override Reloaded.Memory.Streams.Writers.BigEndianMemoryStream.WriteSingle(float data) -> void
override Reloaded.Memory.Streams.Writers.BigEndianMemoryStream.WriteUInt16(ushort data) -> void
override Reloaded.Memory.Streams.Writers.BigEndianMemoryStream.WriteUInt32(uint data) -> void
override Reloaded.Memory.Streams.Writers.BigEndianMemoryStream.WriteUInt64(ulong data) -> void
override Reloaded.Memory.Streams.Writers.LittleEndianMemoryStream.Write<T>(T structure) -> void
override Reloaded.Memory.Streams.Writers.LittleEndianMemoryStream.Write<T>(T[] structure) -> void
override Reloaded.Memory.Streams.Writers.LittleEndianMemoryStream.WriteDouble(double data) -> void
override Reloaded.Memory.Streams.Writers.LittleEndianMemoryStream.WriteInt16(short data) -> void
override Reloaded.Memory.Streams.Writers.LittleEndianMemoryStream.WriteInt32(int data) -> void
override Reloaded.Memory.Streams.Writers.LittleEndianMemoryStream.WriteInt64(long data) -> void
override Reloaded.Memory.Streams.Writers.LittleEndianMemoryStream.WriteSingle(float data) -> void
override Reloaded.Memory.Streams.Writers.LittleEndianMemoryStream.WriteUInt16(ushort data) -> void
override Reloaded.Memory.Streams.Writers.LittleEndianMemoryStream.WriteUInt32(uint data) -> void
override Reloaded.Memory.Streams.Writers.LittleEndianMemoryStream.WriteUInt64(ulong data) -> void
Reloaded.Memory.Endian
Reloaded.Memory.Exceptions.MemoryAllocationException
Reloaded.Memory.Exceptions.MemoryAllocationException.MemoryAllocationException() -> void
Reloaded.Memory.Exceptions.MemoryAllocationException.MemoryAllocationException(string message) -> void
Reloaded.Memory.Exceptions.MemoryAllocationException.MemoryAllocationException(string message, System.Exception innerException) -> void
Reloaded.Memory.Exceptions.MemoryAllocationException.MemoryAllocationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
Reloaded.Memory.Exceptions.MemoryException
Reloaded.Memory.Exceptions.MemoryException.MemoryException() -> void
Reloaded.Memory.Exceptions.MemoryException.MemoryException(string message) -> void
Reloaded.Memory.Exceptions.MemoryException.MemoryException(string message, System.Exception innerException) -> void
Reloaded.Memory.Exceptions.MemoryException.MemoryException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
Reloaded.Memory.Exceptions.MemoryPermissionException
Reloaded.Memory.Exceptions.MemoryPermissionException.MemoryPermissionException() -> void
Reloaded.Memory.Exceptions.MemoryPermissionException.MemoryPermissionException(string message) -> void
Reloaded.Memory.Exceptions.MemoryPermissionException.MemoryPermissionException(string message, System.Exception innerException) -> void
Reloaded.Memory.Exceptions.MemoryPermissionException.MemoryPermissionException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
Reloaded.Memory.IEndianReversible
Reloaded.Memory.IEndianReversible.SwapEndian() -> void
Reloaded.Memory.Interop.Pinnable<T>
Reloaded.Memory.Interop.Pinnable<T>.Dispose() -> void
Reloaded.Memory.Interop.Pinnable<T>.Pinnable(ref T value) -> void
Reloaded.Memory.Interop.Pinnable<T>.Pinnable(T value) -> void
Reloaded.Memory.Interop.Pinnable<T>.Pinnable(T[] value) -> void
Reloaded.Memory.Interop.Pinnable<T>.Pointer.get -> T*
Reloaded.Memory.Interop.Pinnable<T>.Value.get -> T
Reloaded.Memory.Interop.Pinnable<T>.~Pinnable() -> void
Reloaded.Memory.Interop.PinnableDisposable<T>
Reloaded.Memory.Interop.PinnableDisposable<T>.Dispose() -> void
Reloaded.Memory.Interop.PinnableDisposable<T>.PinnableDisposable(ref T value) -> void
Reloaded.Memory.Interop.PinnableDisposable<T>.PinnableDisposable(T value) -> void
Reloaded.Memory.Interop.PinnableDisposable<T>.~PinnableDisposable() -> void
Reloaded.Memory.Kernel32.Kernel32
Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE.MEM_4MB_PAGES = 2147483648 -> Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE.MEM_64K_PAGES = Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE.MEM_PHYSICAL | Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE.MEM_LARGE_PAGES -> Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE.MEM_COMMIT = 4096 -> Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE.MEM_DECOMMIT = 16384 -> Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE.MEM_DIFFERENT_IMAGE_BASE_OK = 8388608 -> Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE.MEM_FREE = 65536 -> Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE.MEM_LARGE_PAGES = 536870912 -> Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE.MEM_MAPPED = 262144 -> Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE.MEM_PHYSICAL = 4194304 -> Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE.MEM_PRIVATE = 131072 -> Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE.MEM_RELEASE = 32768 -> Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE.MEM_RESERVE = 8192 -> Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE.MEM_RESET = 524288 -> Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE.MEM_RESET_UNDO = 16777216 -> Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE.MEM_ROTATE = 8388608 -> Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE.MEM_TOP_DOWN = 1048576 -> Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE.MEM_WRITE_WATCH = 2097152 -> Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION
Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION.PAGE_ENCLAVE_THREAD_CONTROL = 2147483648 -> Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION
Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION.PAGE_ENCLAVE_UNVALIDATED = 536870912 -> Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION
Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION.PAGE_EXECUTE = 16 -> Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION
Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION.PAGE_EXECUTE_READ = 32 -> Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION
Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION.PAGE_EXECUTE_READWRITE = 64 -> Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION
Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION.PAGE_EXECUTE_WRITECOPY = 128 -> Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION
Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION.PAGE_GUARD = 256 -> Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION
Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION.PAGE_NOACCESS = 1 -> Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION
Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION.PAGE_NOCACHE = 512 -> Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION
Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION.PAGE_READONLY = 2 -> Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION
Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION.PAGE_READWRITE = 4 -> Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION
Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION.PAGE_REVERT_TO_FILE_MAP = 2147483648 -> Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION
Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION.PAGE_TARGETS_INVALID = 1073741824 -> Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION
Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION.PAGE_TARGETS_NO_UPDATE = 1073741824 -> Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION
Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION.PAGE_WRITECOMBINE = 1024 -> Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION
Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION.PAGE_WRITECOPY = 8 -> Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION
Reloaded.Memory.Pointers.ArrayPtr<TStruct>
Reloaded.Memory.Pointers.ArrayPtr<TStruct>.ArrayPtr() -> void
Reloaded.Memory.Pointers.ArrayPtr<TStruct>.ArrayPtr(nuint address, bool marshalElements = false, Reloaded.Memory.Sources.IMemory source = null) -> void
Reloaded.Memory.Pointers.ArrayPtr<TStruct>.ElementSize.get -> int
Reloaded.Memory.Pointers.ArrayPtr<TStruct>.Get(out TStruct value, int index) -> void
Reloaded.Memory.Pointers.ArrayPtr<TStruct>.GetPointerToElement(int index) -> void*
Reloaded.Memory.Pointers.ArrayPtr<TStruct>.MarshalElements.get -> bool
Reloaded.Memory.Pointers.ArrayPtr<TStruct>.MarshalElements.set -> void
Reloaded.Memory.Pointers.ArrayPtr<TStruct>.Pointer.get -> void*
Reloaded.Memory.Pointers.ArrayPtr<TStruct>.Pointer.set -> void
Reloaded.Memory.Pointers.ArrayPtr<TStruct>.Set(ref TStruct value, int index) -> void
Reloaded.Memory.Pointers.ArrayPtr<TStruct>.Source.get -> Reloaded.Memory.Sources.IMemory
Reloaded.Memory.Pointers.ArrayPtr<TStruct>.Source.set -> void
Reloaded.Memory.Pointers.ArrayPtr<TStruct>.this[int index].get -> TStruct
Reloaded.Memory.Pointers.ArrayPtr<TStruct>.this[int index].set -> void
Reloaded.Memory.Pointers.BlittablePointer<T>
Reloaded.Memory.Pointers.BlittablePointer<T>.AsReference() -> T
Reloaded.Memory.Pointers.BlittablePointer<T>.AsRefPointer() -> Reloaded.Memory.Pointers.RefPointer<T>
Reloaded.Memory.Pointers.BlittablePointer<T>.BlittablePointer() -> void
Reloaded.Memory.Pointers.BlittablePointer<T>.BlittablePointer(T* pointer) -> void
Reloaded.Memory.Pointers.BlittablePointer<T>.Pointer.get -> T*
Reloaded.Memory.Pointers.BlittablePointer<T>.Pointer.set -> void
Reloaded.Memory.Pointers.FixedArrayPtr<TStruct>
Reloaded.Memory.Pointers.FixedArrayPtr<TStruct>.ArraySize.get -> int
Reloaded.Memory.Pointers.FixedArrayPtr<TStruct>.Contains(ref TStruct item) -> bool
Reloaded.Memory.Pointers.FixedArrayPtr<TStruct>.Contains(TStruct item) -> bool
Reloaded.Memory.Pointers.FixedArrayPtr<TStruct>.CopyFrom(TStruct[] sourceArray, int length, int sourceIndex = 0, int destinationIndex = 0) -> void
Reloaded.Memory.Pointers.FixedArrayPtr<TStruct>.CopyTo(TStruct[] destinationArray, int length, int sourceIndex = 0, int destinationIndex = 0) -> void
Reloaded.Memory.Pointers.FixedArrayPtr<TStruct>.Count.get -> int
Reloaded.Memory.Pointers.FixedArrayPtr<TStruct>.Count.set -> void
Reloaded.Memory.Pointers.FixedArrayPtr<TStruct>.ElementSize.get -> int
Reloaded.Memory.Pointers.FixedArrayPtr<TStruct>.FixedArrayPtr() -> void
Reloaded.Memory.Pointers.FixedArrayPtr<TStruct>.FixedArrayPtr(nuint address, int count, bool marshalElements = false, Reloaded.Memory.Sources.IMemory source = null) -> void
Reloaded.Memory.Pointers.FixedArrayPtr<TStruct>.Get(out TStruct value, int index) -> void
Reloaded.Memory.Pointers.FixedArrayPtr<TStruct>.GetEnumerator() -> System.Collections.Generic.IEnumerator<TStruct>
Reloaded.Memory.Pointers.FixedArrayPtr<TStruct>.GetPointerToElement(int index) -> void*
Reloaded.Memory.Pointers.FixedArrayPtr<TStruct>.IndexOf(ref TStruct item) -> int
Reloaded.Memory.Pointers.FixedArrayPtr<TStruct>.IndexOf(TStruct item) -> int
Reloaded.Memory.Pointers.FixedArrayPtr<TStruct>.MarshalElements.get -> bool
Reloaded.Memory.Pointers.FixedArrayPtr<TStruct>.MarshalElements.set -> void
Reloaded.Memory.Pointers.FixedArrayPtr<TStruct>.Pointer.get -> void*
Reloaded.Memory.Pointers.FixedArrayPtr<TStruct>.Pointer.set -> void
Reloaded.Memory.Pointers.FixedArrayPtr<TStruct>.Set(ref TStruct value, int index) -> void
Reloaded.Memory.Pointers.FixedArrayPtr<TStruct>.Source.get -> Reloaded.Memory.Sources.IMemory
Reloaded.Memory.Pointers.FixedArrayPtr<TStruct>.Source.set -> void
Reloaded.Memory.Pointers.FixedArrayPtr<TStruct>.this[int index].get -> TStruct
Reloaded.Memory.Pointers.FixedArrayPtr<TStruct>.this[int index].set -> void
Reloaded.Memory.Pointers.IArrayPtr<TStruct>
Reloaded.Memory.Pointers.IArrayPtr<TStruct>.ElementSize.get -> int
Reloaded.Memory.Pointers.IArrayPtr<TStruct>.Get(out TStruct value, int index) -> void
Reloaded.Memory.Pointers.IArrayPtr<TStruct>.GetPointerToElement(int index) -> void*
Reloaded.Memory.Pointers.IArrayPtr<TStruct>.MarshalElements.get -> bool
Reloaded.Memory.Pointers.IArrayPtr<TStruct>.MarshalElements.set -> void
Reloaded.Memory.Pointers.IArrayPtr<TStruct>.Pointer.get -> void*
Reloaded.Memory.Pointers.IArrayPtr<TStruct>.Pointer.set -> void
Reloaded.Memory.Pointers.IArrayPtr<TStruct>.Set(ref TStruct value, int index) -> void
Reloaded.Memory.Pointers.IArrayPtr<TStruct>.Source.get -> Reloaded.Memory.Sources.IMemory
Reloaded.Memory.Pointers.IArrayPtr<TStruct>.Source.set -> void
Reloaded.Memory.Pointers.IArrayPtr<TStruct>.this[int index].get -> TStruct
Reloaded.Memory.Pointers.IArrayPtr<TStruct>.this[int index].set -> void
Reloaded.Memory.Pointers.Pointer<TStruct>
Reloaded.Memory.Pointers.Pointer<TStruct>.Address.get -> void*
Reloaded.Memory.Pointers.Pointer<TStruct>.Address.set -> void
Reloaded.Memory.Pointers.Pointer<TStruct>.GetValue() -> TStruct
Reloaded.Memory.Pointers.Pointer<TStruct>.GetValue(out TStruct value) -> void
Reloaded.Memory.Pointers.Pointer<TStruct>.MarshalElements.get -> bool
Reloaded.Memory.Pointers.Pointer<TStruct>.MarshalElements.set -> void
Reloaded.Memory.Pointers.Pointer<TStruct>.Pointer() -> void
Reloaded.Memory.Pointers.Pointer<TStruct>.Pointer(nuint address, bool marshalElements = false, Reloaded.Memory.Sources.IMemory memorySource = null) -> void
Reloaded.Memory.Pointers.Pointer<TStruct>.SetValue(ref TStruct value) -> void
Reloaded.Memory.Pointers.Pointer<TStruct>.SetValue(TStruct value) -> void
Reloaded.Memory.Pointers.Pointer<TStruct>.Source.get -> Reloaded.Memory.Sources.IMemory
Reloaded.Memory.Pointers.Pointer<TStruct>.Source.set -> void
Reloaded.Memory.Pointers.RefArrayPtr<TStruct>
Reloaded.Memory.Pointers.RefArrayPtr<TStruct>.Pointer.get -> TStruct*
Reloaded.Memory.Pointers.RefArrayPtr<TStruct>.RefArrayPtr() -> void
Reloaded.Memory.Pointers.RefArrayPtr<TStruct>.RefArrayPtr(nuint address) -> void
Reloaded.Memory.Pointers.RefArrayPtr<TStruct>.RefArrayPtr(TStruct* structPtr) -> void
Reloaded.Memory.Pointers.RefArrayPtr<TStruct>.this[int index].get -> TStruct
Reloaded.Memory.Pointers.RefFixedArrayPtr<TStruct>
Reloaded.Memory.Pointers.RefFixedArrayPtr<TStruct>.Contains(ref TStruct item) -> bool
Reloaded.Memory.Pointers.RefFixedArrayPtr<TStruct>.Contains(TStruct item) -> bool
Reloaded.Memory.Pointers.RefFixedArrayPtr<TStruct>.CopyFrom(TStruct[] sourceArray, int length, int sourceIndex = 0, int destinationIndex = 0) -> void
Reloaded.Memory.Pointers.RefFixedArrayPtr<TStruct>.CopyTo(TStruct[] destinationArray, int length, int sourceIndex = 0, int destinationIndex = 0) -> void
Reloaded.Memory.Pointers.RefFixedArrayPtr<TStruct>.Count.get -> int
Reloaded.Memory.Pointers.RefFixedArrayPtr<TStruct>.Count.set -> void
Reloaded.Memory.Pointers.RefFixedArrayPtr<TStruct>.IndexOf(ref TStruct item) -> int
Reloaded.Memory.Pointers.RefFixedArrayPtr<TStruct>.IndexOf(TStruct item) -> int
Reloaded.Memory.Pointers.RefFixedArrayPtr<TStruct>.Pointer.get -> TStruct*
Reloaded.Memory.Pointers.RefFixedArrayPtr<TStruct>.Pointer.set -> void
Reloaded.Memory.Pointers.RefFixedArrayPtr<TStruct>.RefFixedArrayPtr() -> void
Reloaded.Memory.Pointers.RefFixedArrayPtr<TStruct>.RefFixedArrayPtr(nuint address, int numberOfItems) -> void
Reloaded.Memory.Pointers.RefFixedArrayPtr<TStruct>.RefFixedArrayPtr(TStruct* structPtr, int numberOfItems) -> void
Reloaded.Memory.Pointers.RefFixedArrayPtr<TStruct>.this[int index].get -> TStruct
Reloaded.Memory.Pointers.RefPointer<TStruct>
Reloaded.Memory.Pointers.RefPointer<TStruct>.Address.get -> TStruct*
Reloaded.Memory.Pointers.RefPointer<TStruct>.Address.set -> void
Reloaded.Memory.Pointers.RefPointer<TStruct>.DepthLevel.get -> int
Reloaded.Memory.Pointers.RefPointer<TStruct>.DepthLevel.set -> void
Reloaded.Memory.Pointers.RefPointer<TStruct>.RefPointer() -> void
Reloaded.Memory.Pointers.RefPointer<TStruct>.RefPointer(TStruct* address, int depthLevel) -> void
Reloaded.Memory.Pointers.RefPointer<TStruct>.TryDereference(out bool success) -> TStruct
Reloaded.Memory.Pointers.RefPointer<TStruct>.TryDereference(out TStruct* value) -> bool
Reloaded.Memory.Pointers.RefPointer<TStruct>.TryDereference(ref TStruct value) -> bool
Reloaded.Memory.Sources.ExternalMemory
Reloaded.Memory.Sources.ExternalMemory.Allocate(int length) -> nuint
Reloaded.Memory.Sources.ExternalMemory.ChangePermission(nuint memoryAddress, int size, Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION newPermissions) -> Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION
Reloaded.Memory.Sources.ExternalMemory.ExternalMemory(System.Diagnostics.Process process) -> void
Reloaded.Memory.Sources.ExternalMemory.ExternalMemory(System.IntPtr processHandle) -> void
Reloaded.Memory.Sources.ExternalMemory.Free(nuint address) -> bool
Reloaded.Memory.Sources.ExternalMemory.Read<T>(nuint memoryAddress, out T value) -> void
Reloaded.Memory.Sources.ExternalMemory.Read<T>(nuint memoryAddress, out T value, bool marshal) -> void
Reloaded.Memory.Sources.ExternalMemory.ReadRaw(nuint memoryAddress, out byte[] value, int length) -> void
Reloaded.Memory.Sources.ExternalMemory.Write<T>(nuint memoryAddress, ref T item) -> void
Reloaded.Memory.Sources.ExternalMemory.Write<T>(nuint memoryAddress, ref T item, bool marshal) -> void
Reloaded.Memory.Sources.ExternalMemory.WriteRaw(nuint memoryAddress, byte[] data) -> void
Reloaded.Memory.Sources.IMemory
Reloaded.Memory.Sources.IMemory.Allocate(int length) -> nuint
Reloaded.Memory.Sources.IMemory.ChangePermission(nuint memoryAddress, int size, Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION newPermissions) -> Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION
Reloaded.Memory.Sources.IMemory.Free(nuint address) -> bool
Reloaded.Memory.Sources.IMemory.Read<T>(nuint memoryAddress, out T value) -> void
Reloaded.Memory.Sources.IMemory.Read<T>(nuint memoryAddress, out T value, bool marshal) -> void
Reloaded.Memory.Sources.IMemory.ReadRaw(nuint memoryAddress, out byte[] value, int length) -> void
Reloaded.Memory.Sources.IMemory.Write<T>(nuint memoryAddress, ref T item) -> void
Reloaded.Memory.Sources.IMemory.Write<T>(nuint memoryAddress, ref T item, bool marshal) -> void
Reloaded.Memory.Sources.IMemory.WriteRaw(nuint memoryAddress, byte[] data) -> void
Reloaded.Memory.Sources.Memory
Reloaded.Memory.Sources.Memory.Allocate(int length) -> nuint
Reloaded.Memory.Sources.Memory.ChangePermission(nuint memoryAddress, int size, Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION newPermissions) -> Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION
Reloaded.Memory.Sources.Memory.Free(nuint address) -> bool
Reloaded.Memory.Sources.Memory.Memory() -> void
Reloaded.Memory.Sources.Memory.Read<T>(nuint memoryAddress, out T value) -> void
Reloaded.Memory.Sources.Memory.Read<T>(nuint memoryAddress, out T value, bool marshal) -> void
Reloaded.Memory.Sources.Memory.ReadRaw(nuint memoryAddress, out byte[] value, int length) -> void
Reloaded.Memory.Sources.Memory.Write<T>(nuint memoryAddress, ref T item) -> void
Reloaded.Memory.Sources.Memory.Write<T>(nuint memoryAddress, ref T item, bool marshal) -> void
Reloaded.Memory.Sources.Memory.WriteRaw(nuint memoryAddress, byte[] data) -> void
Reloaded.Memory.Sources.MemoryExtensions
Reloaded.Memory.Sources.MemoryExtensions.ReadFunction<T>
Reloaded.Memory.Sources.MemoryExtensions.WriteFunction<T>
Reloaded.Memory.Streams.BufferedStreamReader
Reloaded.Memory.Streams.BufferedStreamReader.BaseStream() -> System.IO.Stream
Reloaded.Memory.Streams.BufferedStreamReader.BufferBytesAvailable() -> int
Reloaded.Memory.Streams.BufferedStreamReader.BufferedStreamReader(System.IO.Stream stream, int bufferSize) -> void
Reloaded.Memory.Streams.BufferedStreamReader.CanRead(int size) -> bool
Reloaded.Memory.Streams.BufferedStreamReader.CurrentBufferSize() -> int
Reloaded.Memory.Streams.BufferedStreamReader.Dispose() -> void
Reloaded.Memory.Streams.BufferedStreamReader.Peek<T>() -> T
Reloaded.Memory.Streams.BufferedStreamReader.Peek<T>(bool marshal) -> T
Reloaded.Memory.Streams.BufferedStreamReader.Peek<T>(out T value) -> void
Reloaded.Memory.Streams.BufferedStreamReader.Peek<T>(out T value, bool marshal) -> void
Reloaded.Memory.Streams.BufferedStreamReader.PeekBigEndianPrimitive(out double value) -> void
Reloaded.Memory.Streams.BufferedStreamReader.PeekBigEndianPrimitive(out float value) -> void
Reloaded.Memory.Streams.BufferedStreamReader.PeekBigEndianPrimitive(out int value) -> void
Reloaded.Memory.Streams.BufferedStreamReader.PeekBigEndianPrimitive(out long value) -> void
Reloaded.Memory.Streams.BufferedStreamReader.PeekBigEndianPrimitive(out short value) -> void
Reloaded.Memory.Streams.BufferedStreamReader.PeekBigEndianPrimitive(out uint value) -> void
Reloaded.Memory.Streams.BufferedStreamReader.PeekBigEndianPrimitive(out ulong value) -> void
Reloaded.Memory.Streams.BufferedStreamReader.PeekBigEndianPrimitive(out ushort value) -> void
Reloaded.Memory.Streams.BufferedStreamReader.PeekBigEndianPrimitive<T>() -> T
Reloaded.Memory.Streams.BufferedStreamReader.PeekBigEndianPrimitive<T>(out T value) -> void
Reloaded.Memory.Streams.BufferedStreamReader.PeekBigEndianPrimitiveDouble() -> double
Reloaded.Memory.Streams.BufferedStreamReader.PeekBigEndianPrimitiveInt16() -> short
Reloaded.Memory.Streams.BufferedStreamReader.PeekBigEndianPrimitiveInt32() -> int
Reloaded.Memory.Streams.BufferedStreamReader.PeekBigEndianPrimitiveInt64() -> long
Reloaded.Memory.Streams.BufferedStreamReader.PeekBigEndianPrimitiveSingle() -> float
Reloaded.Memory.Streams.BufferedStreamReader.PeekBigEndianPrimitiveUInt16() -> ushort
Reloaded.Memory.Streams.BufferedStreamReader.PeekBigEndianPrimitiveUInt32() -> uint
Reloaded.Memory.Streams.BufferedStreamReader.PeekBigEndianPrimitiveUInt64() -> ulong
Reloaded.Memory.Streams.BufferedStreamReader.PeekBigEndianStruct<T>() -> T
Reloaded.Memory.Streams.BufferedStreamReader.PeekBigEndianStruct<T>(out T value) -> void
Reloaded.Memory.Streams.BufferedStreamReader.Position() -> long
Reloaded.Memory.Streams.BufferedStreamReader.Read<T>() -> T
Reloaded.Memory.Streams.BufferedStreamReader.Read<T>(bool marshal) -> T
Reloaded.Memory.Streams.BufferedStreamReader.Read<T>(out T value) -> void
Reloaded.Memory.Streams.BufferedStreamReader.Read<T>(out T value, bool marshal) -> void
Reloaded.Memory.Streams.BufferedStreamReader.ReadBigEndianPrimitive(out double value) -> void
Reloaded.Memory.Streams.BufferedStreamReader.ReadBigEndianPrimitive(out float value) -> void
Reloaded.Memory.Streams.BufferedStreamReader.ReadBigEndianPrimitive(out int value) -> void
Reloaded.Memory.Streams.BufferedStreamReader.ReadBigEndianPrimitive(out long value) -> void
Reloaded.Memory.Streams.BufferedStreamReader.ReadBigEndianPrimitive(out short value) -> void
Reloaded.Memory.Streams.BufferedStreamReader.ReadBigEndianPrimitive(out uint value) -> void
Reloaded.Memory.Streams.BufferedStreamReader.ReadBigEndianPrimitive(out ulong value) -> void
Reloaded.Memory.Streams.BufferedStreamReader.ReadBigEndianPrimitive(out ushort value) -> void
Reloaded.Memory.Streams.BufferedStreamReader.ReadBigEndianPrimitive<T>() -> T
Reloaded.Memory.Streams.BufferedStreamReader.ReadBigEndianPrimitive<T>(out T value) -> void
Reloaded.Memory.Streams.BufferedStreamReader.ReadBigEndianPrimitiveDouble() -> double
Reloaded.Memory.Streams.BufferedStreamReader.ReadBigEndianPrimitiveInt16() -> short
Reloaded.Memory.Streams.BufferedStreamReader.ReadBigEndianPrimitiveInt32() -> int
Reloaded.Memory.Streams.BufferedStreamReader.ReadBigEndianPrimitiveInt64() -> long
Reloaded.Memory.Streams.BufferedStreamReader.ReadBigEndianPrimitiveSingle() -> float
Reloaded.Memory.Streams.BufferedStreamReader.ReadBigEndianPrimitiveUInt16() -> ushort
Reloaded.Memory.Streams.BufferedStreamReader.ReadBigEndianPrimitiveUInt32() -> uint
Reloaded.Memory.Streams.BufferedStreamReader.ReadBigEndianPrimitiveUInt64() -> ulong
Reloaded.Memory.Streams.BufferedStreamReader.ReadBigEndianStruct<T>() -> T
Reloaded.Memory.Streams.BufferedStreamReader.ReadBigEndianStruct<T>(out T value) -> void
Reloaded.Memory.Streams.BufferedStreamReader.ReadBytes(long offset, int count) -> byte[]
Reloaded.Memory.Streams.BufferedStreamReader.Seek(long offset, System.IO.SeekOrigin origin) -> void
Reloaded.Memory.Streams.BufferedStreamReader.~BufferedStreamReader() -> void
Reloaded.Memory.Streams.ExtendedMemoryStream
Reloaded.Memory.Streams.ExtendedMemoryStream.AddPadding(byte value, int alignment = 2048) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.AddPadding(int alignment = 2048) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.ExtendedMemoryStream() -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.ExtendedMemoryStream(byte[] buffer) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.ExtendedMemoryStream(byte[] buffer, bool writable) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.ExtendedMemoryStream(byte[] buffer, int index, int count) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.ExtendedMemoryStream(byte[] buffer, int index, int count, bool writable) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.ExtendedMemoryStream(byte[] buffer, int index, int count, bool writable, bool publiclyVisible) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.ExtendedMemoryStream(int capacity) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.Write(byte[] data) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.Write(System.ReadOnlySpan<byte> source) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.Write<T>(ref T structure) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.Write<T>(T structure) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.Write<T>(T[] structure) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.WriteBigEndianPrimitive(byte structure) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.WriteBigEndianPrimitive(byte[] structures) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.WriteBigEndianPrimitive(double structure) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.WriteBigEndianPrimitive(double[] structures) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.WriteBigEndianPrimitive(float structure) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.WriteBigEndianPrimitive(float[] structures) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.WriteBigEndianPrimitive(int structure) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.WriteBigEndianPrimitive(int[] structures) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.WriteBigEndianPrimitive(long structure) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.WriteBigEndianPrimitive(long[] structures) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.WriteBigEndianPrimitive(sbyte structure) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.WriteBigEndianPrimitive(sbyte[] structures) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.WriteBigEndianPrimitive(short structure) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.WriteBigEndianPrimitive(short[] structures) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.WriteBigEndianPrimitive(uint structure) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.WriteBigEndianPrimitive(uint[] structures) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.WriteBigEndianPrimitive(ulong structure) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.WriteBigEndianPrimitive(ulong[] structures) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.WriteBigEndianPrimitive(ushort structure) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.WriteBigEndianPrimitive(ushort[] structures) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.WriteBigEndianPrimitive<T>(T structure) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.WriteBigEndianPrimitive<T>(T[] structures) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.WriteBigEndianStruct<T>(T structure) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.WriteBigEndianStruct<T>(T[] structures) -> void
Reloaded.Memory.Streams.Readers.BigEndianStreamReader
Reloaded.Memory.Streams.Readers.BigEndianStreamReader.BigEndianStreamReader(Reloaded.Memory.Streams.BufferedStreamReader streamReader) -> void
Reloaded.Memory.Streams.Readers.BigEndianStreamReader.BigEndianStreamReader(Reloaded.Memory.Streams.BufferedStreamReader streamReader, bool disposeUnderlyingStream = true) -> void
Reloaded.Memory.Streams.Readers.BigEndianStreamReader.PeekStruct<T>() -> T
Reloaded.Memory.Streams.Readers.BigEndianStreamReader.PeekStruct<T>(out T value) -> void
Reloaded.Memory.Streams.Readers.BigEndianStreamReader.ReadStruct<T>() -> T
Reloaded.Memory.Streams.Readers.BigEndianStreamReader.ReadStruct<T>(out T value) -> void
Reloaded.Memory.Streams.Readers.EndianStreamReader
Reloaded.Memory.Streams.Readers.EndianStreamReader.BaseStream() -> System.IO.Stream
Reloaded.Memory.Streams.Readers.EndianStreamReader.BufferBytesAvailable() -> int
Reloaded.Memory.Streams.Readers.EndianStreamReader.CanRead(int size) -> bool
Reloaded.Memory.Streams.Readers.EndianStreamReader.CurrentBufferSize() -> int
Reloaded.Memory.Streams.Readers.EndianStreamReader.Dispose() -> void
Reloaded.Memory.Streams.Readers.EndianStreamReader.DisposeUnderlyingStream.get -> bool
Reloaded.Memory.Streams.Readers.EndianStreamReader.EndianStreamReader(Reloaded.Memory.Streams.BufferedStreamReader streamReader) -> void
Reloaded.Memory.Streams.Readers.EndianStreamReader.EndianStreamReader(Reloaded.Memory.Streams.BufferedStreamReader streamReader, bool disposeUnderlyingStream) -> void
Reloaded.Memory.Streams.Readers.EndianStreamReader.Position() -> long
Reloaded.Memory.Streams.Readers.EndianStreamReader.ReadBytes(long offset, int count) -> byte[]
Reloaded.Memory.Streams.Readers.EndianStreamReader.Reader.get -> Reloaded.Memory.Streams.BufferedStreamReader
Reloaded.Memory.Streams.Readers.EndianStreamReader.Seek(long offset, System.IO.SeekOrigin origin) -> void
Reloaded.Memory.Streams.Readers.EndianStreamReader.~EndianStreamReader() -> void
Reloaded.Memory.Streams.Readers.LittleEndianStreamReader
Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.LittleEndianStreamReader(Reloaded.Memory.Streams.BufferedStreamReader streamReader) -> void
Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.LittleEndianStreamReader(Reloaded.Memory.Streams.BufferedStreamReader streamReader, bool disposeUnderlyingStream = true) -> void
Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.Peek<T>(bool marshal) -> T
Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.Peek<T>(out T value, bool marshal) -> void
Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.Read<T>(bool marshal) -> T
Reloaded.Memory.Streams.Readers.LittleEndianStreamReader.Read<T>(out T value, bool marshal) -> void
Reloaded.Memory.Streams.StreamExtensions
Reloaded.Memory.Streams.Writers.BigEndianMemoryStream
Reloaded.Memory.Streams.Writers.BigEndianMemoryStream.BigEndianMemoryStream(Reloaded.Memory.Streams.ExtendedMemoryStream stream) -> void
Reloaded.Memory.Streams.Writers.BigEndianMemoryStream.BigEndianMemoryStream(Reloaded.Memory.Streams.ExtendedMemoryStream stream, bool disposeUnderlyingStream = true) -> void
Reloaded.Memory.Streams.Writers.BigEndianMemoryStream.WriteStruct<T>(T structure) -> void
Reloaded.Memory.Streams.Writers.BigEndianMemoryStream.WriteStruct<T>(T[] structures) -> void
Reloaded.Memory.Streams.Writers.EndianMemoryStream
Reloaded.Memory.Streams.Writers.EndianMemoryStream.AddPadding(byte value, int alignment = 2048) -> void
Reloaded.Memory.Streams.Writers.EndianMemoryStream.AddPadding(int alignment = 2048) -> void
Reloaded.Memory.Streams.Writers.EndianMemoryStream.Dispose() -> void
Reloaded.Memory.Streams.Writers.EndianMemoryStream.DisposeUnderlyingStream.get -> bool
Reloaded.Memory.Streams.Writers.EndianMemoryStream.EndianMemoryStream(Reloaded.Memory.Streams.ExtendedMemoryStream stream) -> void
Reloaded.Memory.Streams.Writers.EndianMemoryStream.EndianMemoryStream(Reloaded.Memory.Streams.ExtendedMemoryStream stream, bool disposeUnderlyingStream) -> void
Reloaded.Memory.Streams.Writers.EndianMemoryStream.Stream.get -> Reloaded.Memory.Streams.ExtendedMemoryStream
Reloaded.Memory.Streams.Writers.EndianMemoryStream.ToArray() -> byte[]
Reloaded.Memory.Streams.Writers.EndianMemoryStream.Write(byte[] data) -> void
Reloaded.Memory.Streams.Writers.EndianMemoryStream.~EndianMemoryStream() -> void
Reloaded.Memory.Streams.Writers.LittleEndianMemoryStream
Reloaded.Memory.Streams.Writers.LittleEndianMemoryStream.LittleEndianMemoryStream(Reloaded.Memory.Streams.ExtendedMemoryStream stream) -> void
Reloaded.Memory.Streams.Writers.LittleEndianMemoryStream.LittleEndianMemoryStream(Reloaded.Memory.Streams.ExtendedMemoryStream stream, bool disposeUnderlyingStream = true) -> void
Reloaded.Memory.Struct
Reloaded.Memory.StructArray
Reloaded.Memory.Utilities.Blittable
Reloaded.Memory.Utilities.CircularBuffer
Reloaded.Memory.Utilities.CircularBuffer.Add(byte[] bytesToWrite) -> nuint
Reloaded.Memory.Utilities.CircularBuffer.Add<TStructure>(ref TStructure item, bool marshalElement = false) -> nuint
Reloaded.Memory.Utilities.CircularBuffer.Address.get -> nuint
Reloaded.Memory.Utilities.CircularBuffer.Address.set -> void
Reloaded.Memory.Utilities.CircularBuffer.CanItemFit(int objectSize) -> Reloaded.Memory.Utilities.CircularBuffer.ItemFit
Reloaded.Memory.Utilities.CircularBuffer.CanItemFit<TStructure>(ref TStructure item, bool marshalElement = false) -> Reloaded.Memory.Utilities.CircularBuffer.ItemFit
Reloaded.Memory.Utilities.CircularBuffer.CircularBuffer(int size, Reloaded.Memory.Sources.IMemory source) -> void
Reloaded.Memory.Utilities.CircularBuffer.Dispose() -> void
Reloaded.Memory.Utilities.CircularBuffer.ItemFit
Reloaded.Memory.Utilities.CircularBuffer.ItemFit.No = 0 -> Reloaded.Memory.Utilities.CircularBuffer.ItemFit
Reloaded.Memory.Utilities.CircularBuffer.ItemFit.StartOfBuffer = 2 -> Reloaded.Memory.Utilities.CircularBuffer.ItemFit
Reloaded.Memory.Utilities.CircularBuffer.ItemFit.Yes = 1 -> Reloaded.Memory.Utilities.CircularBuffer.ItemFit
Reloaded.Memory.Utilities.CircularBuffer.Offset.get -> int
Reloaded.Memory.Utilities.CircularBuffer.Offset.set -> void
Reloaded.Memory.Utilities.CircularBuffer.Size.get -> int
Reloaded.Memory.Utilities.CircularBuffer.Size.set -> void
Reloaded.Memory.Utilities.CircularBuffer.Source.get -> Reloaded.Memory.Sources.IMemory
Reloaded.Memory.Utilities.CircularBuffer.WritePointer.get -> nuint
Reloaded.Memory.Utilities.CircularBuffer.~CircularBuffer() -> void
static extern Reloaded.Memory.Kernel32.Kernel32.ReadProcessMemory(System.IntPtr hProcess, System.UIntPtr lpBaseAddress, System.UIntPtr lpBuffer, System.UIntPtr nSize, out System.UIntPtr lpNumberOfBytesRead) -> bool
static extern Reloaded.Memory.Kernel32.Kernel32.VirtualAlloc(System.UIntPtr lpAddress, System.UIntPtr dwSize, Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE flAllocationType, Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION flProtect) -> nuint
static extern Reloaded.Memory.Kernel32.Kernel32.VirtualAllocEx(System.IntPtr hProcess, System.UIntPtr lpAddress, System.UIntPtr dwSize, Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE flAllocationType, Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION flProtect) -> nuint
static extern Reloaded.Memory.Kernel32.Kernel32.VirtualFree(System.UIntPtr lpAddress, System.UIntPtr dwSize, Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE dwFreeType) -> bool
static extern Reloaded.Memory.Kernel32.Kernel32.VirtualFreeEx(System.IntPtr hProcess, System.UIntPtr lpAddress, System.UIntPtr dwSize, Reloaded.Memory.Kernel32.Kernel32.MEM_ALLOCATION_TYPE dwFreeType) -> bool
static extern Reloaded.Memory.Kernel32.Kernel32.VirtualProtect(System.UIntPtr lpAddress, System.UIntPtr dwSize, Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION flNewProtect, out Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION lpflOldProtect) -> bool
static extern Reloaded.Memory.Kernel32.Kernel32.VirtualProtectEx(System.IntPtr hProcess, System.UIntPtr lpAddress, System.UIntPtr dwSize, Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION flNewProtect, out Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION lpflOldProtect) -> bool
static extern Reloaded.Memory.Kernel32.Kernel32.WriteProcessMemory(System.IntPtr hProcess, System.UIntPtr lpBaseAddress, System.UIntPtr lpBuffer, System.UIntPtr nSize, out System.UIntPtr lpNumberOfBytesWritten) -> bool
static Reloaded.Memory.Endian.Reverse(byte value) -> byte
static Reloaded.Memory.Endian.Reverse(double value) -> double
static Reloaded.Memory.Endian.Reverse(float value) -> float
static Reloaded.Memory.Endian.Reverse(int value) -> int
static Reloaded.Memory.Endian.Reverse(long value) -> long
static Reloaded.Memory.Endian.Reverse(sbyte value) -> sbyte
static Reloaded.Memory.Endian.Reverse(short value) -> short
static Reloaded.Memory.Endian.Reverse(uint value) -> uint
static Reloaded.Memory.Endian.Reverse(ulong value) -> ulong
static Reloaded.Memory.Endian.Reverse(ushort value) -> ushort
static Reloaded.Memory.Endian.Reverse<T>(ref T type) -> void
static Reloaded.Memory.Endian.Reverse<T>(ref T type, out T swapped) -> void
static Reloaded.Memory.Pointers.BlittablePointer<T>.implicit operator Reloaded.Memory.Pointers.BlittablePointer<T>(T* operand) -> Reloaded.Memory.Pointers.BlittablePointer<T>
static Reloaded.Memory.Pointers.BlittablePointer<T>.implicit operator T*(Reloaded.Memory.Pointers.BlittablePointer<T> operand) -> T*
static Reloaded.Memory.Pointers.RefPointer<TStruct>.Create(nuint pointer) -> TStruct
static Reloaded.Memory.Pointers.RefPointer<TStruct>.Create(TStruct* pointer) -> TStruct
static Reloaded.Memory.Pointers.RefPointer<TStruct>.implicit operator Reloaded.Memory.Pointers.RefPointer<TStruct>(Reloaded.Memory.Pointers.BlittablePointer<TStruct> operand) -> Reloaded.Memory.Pointers.RefPointer<TStruct>
static Reloaded.Memory.Sources.Memory.CurrentProcess.get -> Reloaded.Memory.Sources.Memory
static Reloaded.Memory.Sources.Memory.Instance.get -> Reloaded.Memory.Sources.Memory
static Reloaded.Memory.Sources.MemoryExtensions.ChangePermission<TMemory, T>(this TMemory memory, nuint memoryAddress, ref T baseElement, Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION newPermissions, bool marshalElement = false) -> Reloaded.Memory.Kernel32.Kernel32.MEM_PROTECTION
static Reloaded.Memory.Sources.MemoryExtensions.Read<TMemory, T>(this TMemory memory, int memoryAddress) -> T
static Reloaded.Memory.Sources.MemoryExtensions.Read<TMemory, T>(this TMemory memory, int memoryAddress, bool marshal) -> T
static Reloaded.Memory.Sources.MemoryExtensions.Read<TMemory, T>(this TMemory memory, long memoryAddress) -> T
static Reloaded.Memory.Sources.MemoryExtensions.Read<TMemory, T>(this TMemory memory, long memoryAddress, bool marshal) -> T
static Reloaded.Memory.Sources.MemoryExtensions.Read<TMemory, T>(this TMemory memory, nuint memoryAddress) -> T
static Reloaded.Memory.Sources.MemoryExtensions.Read<TMemory, T>(this TMemory memory, nuint memoryAddress, bool marshal) -> T
static Reloaded.Memory.Sources.MemoryExtensions.Read<TMemory, T>(this TMemory memory, nuint memoryAddress, out T[] value, int arrayLength, bool marshal = false) -> void
static Reloaded.Memory.Sources.MemoryExtensions.SafeRead<TMemory, T>(this TMemory memory, nuint memoryAddress, out T value) -> void
static Reloaded.Memory.Sources.MemoryExtensions.SafeRead<TMemory, T>(this TMemory memory, nuint memoryAddress, out T value, bool marshal) -> void
static Reloaded.Memory.Sources.MemoryExtensions.SafeRead<TMemory, T>(this TMemory memory, nuint memoryAddress, out T[] value, int arrayLength, bool marshal = false) -> void
static Reloaded.Memory.Sources.MemoryExtensions.SafeReadRaw<TMemory>(this TMemory memory, nuint memoryAddress, out byte[] value, int length) -> void
static Reloaded.Memory.Sources.MemoryExtensions.SafeWrite<TMemory, T>(this TMemory memory, int memoryAddress, T item, bool marshal = false) -> void
static Reloaded.Memory.Sources.MemoryExtensions.SafeWrite<TMemory, T>(this TMemory memory, long memoryAddress, T item, bool marshal = false) -> void
static Reloaded.Memory.Sources.MemoryExtensions.SafeWrite<TMemory, T>(this TMemory memory, nuint memoryAddress, ref T item) -> void
static Reloaded.Memory.Sources.MemoryExtensions.SafeWrite<TMemory, T>(this TMemory memory, nuint memoryAddress, ref T item, bool marshal) -> void
static Reloaded.Memory.Sources.MemoryExtensions.SafeWrite<TMemory, T>(this TMemory memory, nuint memoryAddress, T item, bool marshal = false) -> void
static Reloaded.Memory.Sources.MemoryExtensions.SafeWrite<TMemory, T>(this TMemory memory, nuint memoryAddress, T[] items, bool marshal = false) -> void
static Reloaded.Memory.Sources.MemoryExtensions.SafeWriteRaw<TMemory>(this TMemory memory, nuint memoryAddress, byte[] data) -> void
static Reloaded.Memory.Sources.MemoryExtensions.Write<TMemory, T>(this TMemory memory, int memoryAddress, T item) -> void
static Reloaded.Memory.Sources.MemoryExtensions.Write<TMemory, T>(this TMemory memory, long memoryAddress, T item) -> void
static Reloaded.Memory.Sources.MemoryExtensions.Write<TMemory, T>(this TMemory memory, nuint memoryAddress, T item) -> void
static Reloaded.Memory.Streams.StreamExtensions.AddPadding(this System.IO.Stream stream, byte value, int alignment = 2048) -> void
static Reloaded.Memory.Streams.StreamExtensions.AddPadding(this System.IO.Stream stream, int alignment = 2048) -> void
static Reloaded.Memory.Streams.StreamExtensions.TryReadSafe(this System.IO.Stream stream, byte[] result) -> bool
static Reloaded.Memory.Streams.StreamExtensions.Write(this System.IO.Stream stream, byte[] data) -> void
static Reloaded.Memory.Streams.StreamExtensions.Write<T>(this System.IO.Stream stream, ref T structure) -> void
static Reloaded.Memory.Streams.StreamExtensions.Write<T>(this System.IO.Stream stream, T structure) -> void
static Reloaded.Memory.Streams.StreamExtensions.Write<T>(this System.IO.Stream stream, T[] structure) -> void
static Reloaded.Memory.Streams.StreamExtensions.WriteBigEndianPrimitive<T>(this System.IO.Stream stream, T structure) -> void
static Reloaded.Memory.Streams.StreamExtensions.WriteBigEndianPrimitive<T>(this System.IO.Stream stream, T[] structures) -> void
static Reloaded.Memory.Streams.StreamExtensions.WriteBigEndianStruct<T>(this System.IO.Stream stream, T structure) -> void
static Reloaded.Memory.Streams.StreamExtensions.WriteBigEndianStruct<T>(this System.IO.Stream stream, T[] structures) -> void
static Reloaded.Memory.Struct.FromArray<T>(System.Span<byte> data, out T value) -> void
static Reloaded.Memory.Struct.FromPtr<T>(nuint pointer, out T value, bool marshalElement = false) -> void
static Reloaded.Memory.Struct.FromPtr<T>(nuint pointer, out T value, Reloaded.Memory.Sources.MemoryExtensions.ReadFunction<T> readFunction, bool marshalElement = false) -> void
static Reloaded.Memory.Struct.GetBytes<T>(ref T item) -> byte[]
static Reloaded.Memory.Struct.GetBytes<T>(ref T item, bool marshalElement) -> byte[]
static Reloaded.Memory.Struct.GetBytes<T>(ref T item, bool marshalElement, System.Span<byte> buffer) -> System.Span<byte>
static Reloaded.Memory.Struct.GetBytes<T>(ref T item, System.Span<byte> buffer) -> System.Span<byte>
static Reloaded.Memory.Struct.GetBytes<T>(T item) -> byte[]
static Reloaded.Memory.Struct.GetBytes<T>(T item, bool marshalElement) -> byte[]
static Reloaded.Memory.Struct.GetBytes<T>(T item, bool marshalElement, System.Span<byte> buffer) -> System.Span<byte>
static Reloaded.Memory.Struct.GetBytes<T>(T item, System.Span<byte> buffer) -> System.Span<byte>
static Reloaded.Memory.Struct.GetSize<T>() -> int
static Reloaded.Memory.Struct.GetSize<T>(bool marshalElement) -> int
static Reloaded.Memory.Struct.Source.get -> Reloaded.Memory.Sources.IMemory
static Reloaded.Memory.Struct.Source.set -> void
static Reloaded.Memory.Struct.ToPtr<T>(nuint pointer, ref T item, bool marshalElement = false) -> void
static Reloaded.Memory.Struct.ToPtr<T>(nuint pointer, ref T item, Reloaded.Memory.Sources.MemoryExtensions.WriteFunction<T> writeFunction, bool marshalElement = false) -> void
static Reloaded.Memory.Struct.ToPtr<T>(nuint pointer, T item, bool marshalElement = false) -> void
static Reloaded.Memory.StructArray.FromPtr<T>(nuint memoryAddress, out T[] value, int arrayLength, bool marshal = false) -> void
static Reloaded.Memory.StructArray.GetBytes<T>(T[] items) -> byte[]
static Reloaded.Memory.StructArray.GetBytes<T>(T[] items, bool marshalElements) -> byte[]
static Reloaded.Memory.StructArray.GetBytes<T>(T[] items, bool marshalElements, System.Span<byte> buffer) -> System.Span<byte>
static Reloaded.Memory.StructArray.GetBytes<T>(T[] items, System.Span<byte> buffer) -> System.Span<byte>
static Reloaded.Memory.StructArray.GetSize<T>(int elementCount) -> int
static Reloaded.Memory.StructArray.GetSize<T>(int elementCount, bool marshalElement) -> int
static Reloaded.Memory.StructArray.ToPtr<T>(nuint memoryAddress, T[] item, bool marshal = false) -> void
static Reloaded.Memory.Utilities.Blittable.IsBlittable(System.Type type) -> bool
static Reloaded.Memory.Utilities.Blittable.IsBlittable<T>() -> bool
static Reloaded.Memory.Struct.FromArray<T>(byte[] data, out T value) -> void
static Reloaded.Memory.Struct.FromArray<T>(byte[] data, out T value, bool marshalElement) -> void
static Reloaded.Memory.Struct.FromArray<T>(byte[] data, out T value, bool marshalElement, int startIndex) -> void
static Reloaded.Memory.Struct.FromArray<T>(byte[] data, out T value, int startIndex) -> void
static Reloaded.Memory.Struct.FromArray<T>(System.Span<byte> data, out T value, bool marshalElement) -> void
static Reloaded.Memory.Struct.FromArray<T>(System.Span<byte> data, out T value, bool marshalElement, int startIndex) -> void
static Reloaded.Memory.StructArray.FromArray<T>(byte[] data, out T[] value) -> void
static Reloaded.Memory.StructArray.FromArray<T>(byte[] data, out T[] value, bool marshalElement) -> void
static Reloaded.Memory.StructArray.FromArray<T>(byte[] data, out T[] value, bool marshalElement, int length) -> void
static Reloaded.Memory.StructArray.FromArray<T>(byte[] data, out T[] value, bool marshalElement, int length, int startIndex) -> void
static Reloaded.Memory.StructArray.FromArray<T>(byte[] data, out T[] value, int startIndex) -> void
static Reloaded.Memory.StructArray.FromArray<T>(byte[] data, out T[] value, int startIndex, int length) -> void
static Reloaded.Memory.StructArray.FromArray<T>(System.Span<byte> data, out T[] value) -> void
static Reloaded.Memory.StructArray.FromArray<T>(System.Span<byte> data, out T[] value, bool marshalElement) -> void
static Reloaded.Memory.StructArray.FromArray<T>(System.Span<byte> data, out T[] value, bool marshalElement, int length) -> void
static Reloaded.Memory.StructArray.FromArray<T>(System.Span<byte> data, out T[] value, bool marshalElement, int length, int startIndex) -> void
static Reloaded.Memory.StructArray.FromArray<T>(System.Span<byte> data, out T[] value, int length) -> void
static Reloaded.Memory.StructArray.FromArrayBigEndianPrimitive<T>(byte[] data, out T[] value) -> void
static Reloaded.Memory.StructArray.FromArrayBigEndianPrimitive<T>(byte[] data, out T[] value, int startIndex) -> void
static Reloaded.Memory.StructArray.FromArrayBigEndianPrimitive<T>(byte[] data, out T[] value, int startIndex, int length) -> void
static Reloaded.Memory.StructArray.FromArrayBigEndianPrimitive<T>(System.Span<byte> data, out T[] value) -> void
static Reloaded.Memory.StructArray.FromArrayBigEndianPrimitive<T>(System.Span<byte> data, out T[] value, int length) -> void
static Reloaded.Memory.StructArray.FromArrayBigEndianStruct<T>(byte[] data, out T[] value, int startIndex) -> void
static Reloaded.Memory.StructArray.FromArrayBigEndianStruct<T>(byte[] data, out T[] value, int startIndex, int length) -> void
static Reloaded.Memory.StructArray.FromArrayBigEndianStruct<T>(System.Span<byte> data, out T[] value) -> void
static Reloaded.Memory.StructArray.FromArrayBigEndianStruct<T>(System.Span<byte> data, out T[] value, int length) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.Write<T>(ref T structure, bool marshalStructure) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.Write<T>(T structure, bool marshalStructure) -> void
Reloaded.Memory.Streams.ExtendedMemoryStream.Write<T>(T[] structure, bool marshalStructure) -> void
Reloaded.Memory.Streams.Writers.LittleEndianMemoryStream.Write<T>(T structure, bool marshalStructure) -> void
Reloaded.Memory.Streams.Writers.LittleEndianMemoryStream.Write<T>(T[] structure, bool marshalStructure) -> void
static Reloaded.Memory.Sources.MemoryExtensions.Write<TMemory, T>(this TMemory memory, int memoryAddress, T item, bool marshal) -> void
static Reloaded.Memory.Sources.MemoryExtensions.Write<TMemory, T>(this TMemory memory, long memoryAddress, T item, bool marshal) -> void
static Reloaded.Memory.Sources.MemoryExtensions.Write<TMemory, T>(this TMemory memory, nuint memoryAddress, T item, bool marshal) -> void
static Reloaded.Memory.Sources.MemoryExtensions.Write<TMemory, T>(this TMemory memory, nuint memoryAddress, T[] items) -> void
static Reloaded.Memory.Sources.MemoryExtensions.Write<TMemory, T>(this TMemory memory, nuint memoryAddress, T[] items, bool marshal) -> void
static Reloaded.Memory.Streams.StreamExtensions.Write<T>(this System.IO.Stream stream, ref T structure, bool marshalStructure) -> void
static Reloaded.Memory.Streams.StreamExtensions.Write<T>(this System.IO.Stream stream, T structure, bool marshalStructure) -> void
static Reloaded.Memory.Streams.StreamExtensions.Write<T>(this System.IO.Stream stream, T[] structure, bool marshalStructure) -> void