#nullable enable
override Reloaded.Memory.Pointers.MarshalledPtr<T>.Equals(object? obj) -> bool
override Reloaded.Memory.Pointers.MarshalledPtr<T>.GetHashCode() -> int
override Reloaded.Memory.Pointers.MarshalledPtr<T>.ToString() -> string!
override Reloaded.Memory.Pointers.Ptr<T>.Equals(object? obj) -> bool
override Reloaded.Memory.Pointers.Ptr<T>.GetHashCode() -> int
override Reloaded.Memory.Pointers.Ptr<T>.ToString() -> string!
override Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>.Equals(object? obj) -> bool
override Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>.GetHashCode() -> int
override Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>.ToString() -> string!
override Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>.Equals(object? obj) -> bool
override Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>.GetHashCode() -> int
override Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>.ToString() -> string!
override Reloaded.Memory.Utilities.Box<T>.Equals(object? obj) -> bool
override Reloaded.Memory.Utilities.Box<T>.GetHashCode() -> int
override Reloaded.Memory.Utilities.Box<T>.ToString() -> string!
Reloaded.Memory.Enums.MemoryProtection
Reloaded.Memory.Enums.MemoryProtection.Execute = 4 -> Reloaded.Memory.Enums.MemoryProtection
Reloaded.Memory.Enums.MemoryProtection.Read = 1 -> Reloaded.Memory.Enums.MemoryProtection
Reloaded.Memory.Enums.MemoryProtection.ReadWriteExecute = Reloaded.Memory.Enums.MemoryProtection.Read | Reloaded.Memory.Enums.MemoryProtection.Write | Reloaded.Memory.Enums.MemoryProtection.Execute -> Reloaded.Memory.Enums.MemoryProtection
Reloaded.Memory.Enums.MemoryProtection.Write = 2 -> Reloaded.Memory.Enums.MemoryProtection
Reloaded.Memory.Enums.MemoryProtectionExtensions
Reloaded.Memory.Exceptions.MemoryAllocationException
Reloaded.Memory.Exceptions.MemoryAllocationException.MemoryAllocationException(string! message) -> void
Reloaded.Memory.Exceptions.MemoryException
Reloaded.Memory.Exceptions.MemoryException.MemoryException(string! message) -> void
Reloaded.Memory.Exceptions.MemoryPermissionException
Reloaded.Memory.Exceptions.MemoryPermissionException.MemoryPermissionException(string! message) -> void
Reloaded.Memory.Extensions.ArrayExtensions
Reloaded.Memory.Extensions.BoolExtensions
Reloaded.Memory.Extensions.EnumExtensions
Reloaded.Memory.Extensions.SpanExtensions
Reloaded.Memory.Extensions.StreamExtensions
Reloaded.Memory.Extensions.StringExtensions
Reloaded.Memory.ExternalMemory
Reloaded.Memory.ExternalMemory.Allocate(nuint length) -> Reloaded.Memory.Structs.MemoryAllocation
Reloaded.Memory.ExternalMemory.ChangeProtectionRaw(nuint memoryAddress, int size, nuint newProtection) -> nuint
Reloaded.Memory.ExternalMemory.ExternalMemory() -> void
Reloaded.Memory.ExternalMemory.ExternalMemory(nint processHandle) -> void
Reloaded.Memory.ExternalMemory.ExternalMemory(System.Diagnostics.Process! process) -> void
Reloaded.Memory.ExternalMemory.Free(Reloaded.Memory.Structs.MemoryAllocation allocation) -> bool
Reloaded.Memory.ExternalMemory.ReadRaw(nuint offset, System.Span<byte> value) -> void
Reloaded.Memory.ExternalMemory.ReadRef<T>(nuint offset, ref T value) -> void
Reloaded.Memory.ExternalMemory.ReadWithMarshalling<T>(nuint offset, ref T value) -> void
Reloaded.Memory.ExternalMemory.Write<T>(nuint offset, in T item) -> void
Reloaded.Memory.ExternalMemory.WriteRaw(nuint offset, System.Span<byte> data) -> void
Reloaded.Memory.ExternalMemory.WriteWithMarshalling<T>(nuint offset, in T item) -> void
Reloaded.Memory.Interfaces.CanAllocateMemoryExtensions
Reloaded.Memory.Interfaces.CanChangeMemoryProtectionExtensions
Reloaded.Memory.Interfaces.ICanAllocateMemory
Reloaded.Memory.Interfaces.ICanAllocateMemory.Allocate(nuint length) -> Reloaded.Memory.Structs.MemoryAllocation
Reloaded.Memory.Interfaces.ICanAllocateMemory.Free(Reloaded.Memory.Structs.MemoryAllocation allocation) -> bool
Reloaded.Memory.Interfaces.ICanBeReadByAnEndianReader
Reloaded.Memory.Interfaces.ICanBeReadByAnEndianReader.Read<TEndianReader>(ref TEndianReader reader) -> void
Reloaded.Memory.Interfaces.ICanChangeMemoryProtection
Reloaded.Memory.Interfaces.ICanChangeMemoryProtection.ChangeProtectionRaw(nuint memoryAddress, int size, nuint newProtection) -> nuint
Reloaded.Memory.Interfaces.ICanReadWriteMemory
Reloaded.Memory.Interfaces.ICanReadWriteMemory.Read<TData>(nuint offset) -> TData
Reloaded.Memory.Interfaces.ICanReadWriteMemory.Read<TData>(nuint offset, out TData value) -> void
Reloaded.Memory.Interfaces.ICanReadWriteMemory.ReadRaw(nuint offset, int length) -> byte[]!
Reloaded.Memory.Interfaces.ICanReadWriteMemory.ReadRaw(nuint offset, System.Span<byte> value) -> void
Reloaded.Memory.Interfaces.ICanReadWriteMemory.ReadRef<T>(nuint offset, ref T value) -> void
Reloaded.Memory.Interfaces.ICanReadWriteMemory.ReadWithMarshalling<T>(nuint offset, ref T value) -> void
Reloaded.Memory.Interfaces.ICanReadWriteMemory.ReadWithMarshalling<TData>(nuint offset) -> TData
Reloaded.Memory.Interfaces.ICanReadWriteMemory.ReadWithMarshallingOutParameter<TData>(nuint offset, out TData? value) -> void
Reloaded.Memory.Interfaces.ICanReadWriteMemory.Write<T>(nuint offset, in T item) -> void
Reloaded.Memory.Interfaces.ICanReadWriteMemory.WriteRaw(nuint offset, System.Span<byte> data) -> void
Reloaded.Memory.Interfaces.ICanReadWriteMemory.WriteWithMarshalling<T>(nuint offset, in T item) -> void
Reloaded.Memory.Interfaces.ICanReverseEndian
Reloaded.Memory.Interfaces.ICanReverseEndian.ReverseEndian() -> void
Reloaded.Memory.Interfaces.ICanWriteToAnEndianWriter
Reloaded.Memory.Interfaces.ICanWriteToAnEndianWriter.Write<TEndianWriter>(ref TEndianWriter reader) -> void
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.Advance(long offset) -> void
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.BufferedBytesAvailable.get -> int
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.CurrentBufferSize.get -> int
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.IsEndOfStream.get -> bool
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.Peek(out byte value) -> void
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.Peek(out double value) -> void
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.Peek(out float value) -> void
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.Peek(out int value) -> void
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.Peek(out long value) -> void
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.Peek(out sbyte value) -> void
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.Peek(out short value) -> void
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.Peek(out uint value) -> void
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.Peek(out ulong value) -> void
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.Peek(out ushort value) -> void
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.PeekByte() -> byte
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.PeekDouble() -> double
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.PeekInt16() -> short
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.PeekInt32() -> int
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.PeekInt64() -> long
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.PeekSByte() -> sbyte
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.PeekSingle() -> float
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.PeekStruct<T>() -> T
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.PeekStruct<T>(out T result) -> void
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.PeekUInt16() -> ushort
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.PeekUInt32() -> uint
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.PeekUInt64() -> ulong
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.Position.get -> long
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.Read(out byte value) -> void
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.Read(out double value) -> void
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.Read(out float value) -> void
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.Read(out int value) -> void
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.Read(out long value) -> void
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.Read(out sbyte value) -> void
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.Read(out short value) -> void
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.Read(out uint value) -> void
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.Read(out ulong value) -> void
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.Read(out ushort value) -> void
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.ReadByte() -> byte
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.ReadBytesUnbuffered(long offset, System.Span<byte> data) -> int
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.ReadDouble() -> double
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.ReadInt16() -> short
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.ReadInt32() -> int
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.ReadInt64() -> long
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.ReadRaw(int length, out int available) -> byte*
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.ReadRaw<T>(int numItems, out int available) -> T*
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.ReadRaw<T>(System.Span<T> buffer) -> int
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.ReadRaw<T>(T* buffer, int numItems) -> int
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.ReadSByte() -> sbyte
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.ReadSingle() -> float
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.ReadStruct<T>() -> T
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.ReadStruct<T>(out T result) -> void
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.ReadUInt16() -> ushort
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.ReadUInt32() -> uint
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.ReadUInt64() -> ulong
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader.Seek(long offset, System.IO.SeekOrigin origin) -> void
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader<TStream>
Reloaded.Memory.Interfaces.IEndianedBufferStreamReader<TStream>.BaseStream.get -> TStream!
Reloaded.Memory.Interfaces.IEndianReader
Reloaded.Memory.Interfaces.IEndianReader.Read<T>() -> T
Reloaded.Memory.Interfaces.IEndianReader.Read<T>(ref T item) -> void
Reloaded.Memory.Interfaces.IEndianReader.ReadByte() -> byte
Reloaded.Memory.Interfaces.IEndianReader.ReadByteAtOffset(int offset) -> byte
Reloaded.Memory.Interfaces.IEndianReader.ReadDouble() -> double
Reloaded.Memory.Interfaces.IEndianReader.ReadDoubleAtOffset(int offset) -> double
Reloaded.Memory.Interfaces.IEndianReader.ReadFloat() -> float
Reloaded.Memory.Interfaces.IEndianReader.ReadFloatAtOffset(int offset) -> float
Reloaded.Memory.Interfaces.IEndianReader.ReadInt() -> int
Reloaded.Memory.Interfaces.IEndianReader.ReadIntAtOffset(int offset) -> int
Reloaded.Memory.Interfaces.IEndianReader.ReadLong() -> long
Reloaded.Memory.Interfaces.IEndianReader.ReadLongAtOffset(int offset) -> long
Reloaded.Memory.Interfaces.IEndianReader.ReadSByte() -> sbyte
Reloaded.Memory.Interfaces.IEndianReader.ReadSByteAtOffset(int offset) -> sbyte
Reloaded.Memory.Interfaces.IEndianReader.ReadShort() -> short
Reloaded.Memory.Interfaces.IEndianReader.ReadShortAtOffset(int offset) -> short
Reloaded.Memory.Interfaces.IEndianReader.ReadUInt() -> uint
Reloaded.Memory.Interfaces.IEndianReader.ReadUIntAtOffset(int offset) -> uint
Reloaded.Memory.Interfaces.IEndianReader.ReadULong() -> ulong
Reloaded.Memory.Interfaces.IEndianReader.ReadULongAtOffset(int offset) -> ulong
Reloaded.Memory.Interfaces.IEndianReader.ReadUShort() -> ushort
Reloaded.Memory.Interfaces.IEndianReader.ReadUShortAtOffset(int offset) -> ushort
Reloaded.Memory.Interfaces.IEndianReader.Seek(int offset) -> void
Reloaded.Memory.Interfaces.IEndianWriter
Reloaded.Memory.Interfaces.IEndianWriter.Seek(int offset) -> void
Reloaded.Memory.Interfaces.IEndianWriter.Write(byte value) -> void
Reloaded.Memory.Interfaces.IEndianWriter.Write(double value) -> void
Reloaded.Memory.Interfaces.IEndianWriter.Write(float value) -> void
Reloaded.Memory.Interfaces.IEndianWriter.Write(int value) -> void
Reloaded.Memory.Interfaces.IEndianWriter.Write(long value) -> void
Reloaded.Memory.Interfaces.IEndianWriter.Write(sbyte value) -> void
Reloaded.Memory.Interfaces.IEndianWriter.Write(short value) -> void
Reloaded.Memory.Interfaces.IEndianWriter.Write(System.Span<byte> data) -> void
Reloaded.Memory.Interfaces.IEndianWriter.Write(uint value) -> void
Reloaded.Memory.Interfaces.IEndianWriter.Write(ulong value) -> void
Reloaded.Memory.Interfaces.IEndianWriter.Write(ushort value) -> void
Reloaded.Memory.Interfaces.IEndianWriter.Write<T>(in T item) -> void
Reloaded.Memory.Interfaces.IEndianWriter.WriteAtOffset(byte value, int offset) -> void
Reloaded.Memory.Interfaces.IEndianWriter.WriteAtOffset(double value, int offset) -> void
Reloaded.Memory.Interfaces.IEndianWriter.WriteAtOffset(float value, int offset) -> void
Reloaded.Memory.Interfaces.IEndianWriter.WriteAtOffset(int value, int offset) -> void
Reloaded.Memory.Interfaces.IEndianWriter.WriteAtOffset(long value, int offset) -> void
Reloaded.Memory.Interfaces.IEndianWriter.WriteAtOffset(sbyte value, int offset) -> void
Reloaded.Memory.Interfaces.IEndianWriter.WriteAtOffset(short value, int offset) -> void
Reloaded.Memory.Interfaces.IEndianWriter.WriteAtOffset(uint value, int offset) -> void
Reloaded.Memory.Interfaces.IEndianWriter.WriteAtOffset(ulong value, int offset) -> void
Reloaded.Memory.Interfaces.IEndianWriter.WriteAtOffset(ushort value, int offset) -> void
Reloaded.Memory.Memory
Reloaded.Memory.Memory.Allocate(nuint length) -> Reloaded.Memory.Structs.MemoryAllocation
Reloaded.Memory.Memory.ChangeProtectionRaw(nuint memoryAddress, int size, nuint newProtection) -> nuint
Reloaded.Memory.Memory.Free(Reloaded.Memory.Structs.MemoryAllocation allocation) -> bool
Reloaded.Memory.Memory.Memory() -> void
Reloaded.Memory.Memory.ReadRaw(nuint offset, System.Span<byte> value) -> void
Reloaded.Memory.Memory.ReadRef<T>(nuint offset, ref T value) -> void
Reloaded.Memory.Memory.ReadWithMarshalling<T>(nuint offset, ref T value) -> void
Reloaded.Memory.Memory.Write<T>(nuint offset, in T item) -> void
Reloaded.Memory.Memory.WriteRaw(nuint offset, System.Span<byte> data) -> void
Reloaded.Memory.Memory.WriteWithMarshalling<T>(nuint offset, in T item) -> void
Reloaded.Memory.Native.Unix.Posix
Reloaded.Memory.Native.Unix.Posix.IoVec
Reloaded.Memory.Native.Unix.Posix.IoVec.IoVec() -> void
Reloaded.Memory.Native.Unix.Posix.IoVec.iov_base -> nuint
Reloaded.Memory.Native.Unix.Posix.IoVec.iov_len -> nuint
Reloaded.Memory.Native.Unix.UnixMemoryProtection
Reloaded.Memory.Native.Unix.UnixMemoryProtection.PROT_EXEC = 4 -> Reloaded.Memory.Native.Unix.UnixMemoryProtection
Reloaded.Memory.Native.Unix.UnixMemoryProtection.PROT_NONE = 0 -> Reloaded.Memory.Native.Unix.UnixMemoryProtection
Reloaded.Memory.Native.Unix.UnixMemoryProtection.PROT_READ = 1 -> Reloaded.Memory.Native.Unix.UnixMemoryProtection
Reloaded.Memory.Native.Unix.UnixMemoryProtection.PROT_WRITE = 2 -> Reloaded.Memory.Native.Unix.UnixMemoryProtection
Reloaded.Memory.Native.Windows.Kernel32
Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE.MEM_4MB_PAGES = 2147483648 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE.MEM_64K_PAGES = Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE.MEM_PHYSICAL | Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE.MEM_LARGE_PAGES -> Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE.MEM_COMMIT = 4096 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE.MEM_DECOMMIT = 16384 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE.MEM_DIFFERENT_IMAGE_BASE_OK = 8388608 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE.MEM_FREE = 65536 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE.MEM_LARGE_PAGES = 536870912 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE.MEM_MAPPED = 262144 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE.MEM_PHYSICAL = 4194304 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE.MEM_PRIVATE = 131072 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE.MEM_RELEASE = 32768 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE.MEM_RESERVE = 8192 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE.MEM_RESET = 524288 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE.MEM_RESET_UNDO = 16777216 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE.MEM_ROTATE = 8388608 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE.MEM_TOP_DOWN = 1048576 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE.MEM_WRITE_WATCH = 2097152 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE
Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION
Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION.PAGE_ENCLAVE_THREAD_CONTROL = 2147483648 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION
Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION.PAGE_ENCLAVE_UNVALIDATED = 536870912 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION
Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION.PAGE_EXECUTE = 16 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION
Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION.PAGE_EXECUTE_READ = 32 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION
Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION.PAGE_EXECUTE_READWRITE = 64 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION
Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION.PAGE_EXECUTE_WRITECOPY = 128 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION
Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION.PAGE_GUARD = 256 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION
Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION.PAGE_NOACCESS = 1 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION
Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION.PAGE_NOCACHE = 512 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION
Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION.PAGE_READONLY = 2 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION
Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION.PAGE_READWRITE = 4 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION
Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION.PAGE_REVERT_TO_FILE_MAP = 2147483648 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION
Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION.PAGE_TARGETS_INVALID = 1073741824 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION
Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION.PAGE_TARGETS_NO_UPDATE = 1073741824 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION
Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION.PAGE_WRITECOMBINE = 1024 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION
Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION.PAGE_WRITECOPY = 8 -> Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION
Reloaded.Memory.Pointers.FixedArrayPtr<T>
Reloaded.Memory.Pointers.FixedArrayPtr<T>.ArraySize.get -> int
Reloaded.Memory.Pointers.FixedArrayPtr<T>.AsRef(int index) -> T
Reloaded.Memory.Pointers.FixedArrayPtr<T>.Contains(in T item) -> bool
Reloaded.Memory.Pointers.FixedArrayPtr<T>.Contains<TSource>(TSource source, in T item) -> bool
Reloaded.Memory.Pointers.FixedArrayPtr<T>.CopyFrom(System.Span<T> sourceArray, int length) -> void
Reloaded.Memory.Pointers.FixedArrayPtr<T>.CopyFrom(System.Span<T> sourceArray, int length, int sourceIndex, int destinationIndex) -> void
Reloaded.Memory.Pointers.FixedArrayPtr<T>.CopyFrom<TSource>(TSource source, System.Span<T> sourceArray, int length) -> void
Reloaded.Memory.Pointers.FixedArrayPtr<T>.CopyFrom<TSource>(TSource source, System.Span<T> sourceArray, int length, int sourceIndex, int destinationIndex) -> void
Reloaded.Memory.Pointers.FixedArrayPtr<T>.CopyTo(System.Span<T> destinationArray, int length) -> void
Reloaded.Memory.Pointers.FixedArrayPtr<T>.CopyTo(System.Span<T> destinationArray, int length, int sourceIndex, int destinationIndex) -> void
Reloaded.Memory.Pointers.FixedArrayPtr<T>.CopyTo<TSource>(TSource source, System.Span<T> destinationArray, int length) -> void
Reloaded.Memory.Pointers.FixedArrayPtr<T>.CopyTo<TSource>(TSource source, System.Span<T> destinationArray, int length, int sourceIndex, int destinationIndex) -> void
Reloaded.Memory.Pointers.FixedArrayPtr<T>.Count -> int
Reloaded.Memory.Pointers.FixedArrayPtr<T>.FixedArrayPtr() -> void
Reloaded.Memory.Pointers.FixedArrayPtr<T>.FixedArrayPtr(T* address, int count) -> void
Reloaded.Memory.Pointers.FixedArrayPtr<T>.Get() -> T
Reloaded.Memory.Pointers.FixedArrayPtr<T>.Get(int index) -> T
Reloaded.Memory.Pointers.FixedArrayPtr<T>.Get(int index, out T value) -> void
Reloaded.Memory.Pointers.FixedArrayPtr<T>.Get(out T value) -> void
Reloaded.Memory.Pointers.FixedArrayPtr<T>.Get<TSource>(TSource source) -> T
Reloaded.Memory.Pointers.FixedArrayPtr<T>.Get<TSource>(TSource source, int index) -> T
Reloaded.Memory.Pointers.FixedArrayPtr<T>.Get<TSource>(TSource source, int index, out T value) -> void
Reloaded.Memory.Pointers.FixedArrayPtr<T>.Get<TSource>(TSource source, out T value) -> void
Reloaded.Memory.Pointers.FixedArrayPtr<T>.IndexOf(in T item) -> int
Reloaded.Memory.Pointers.FixedArrayPtr<T>.IndexOf<TSource>(TSource source, in T item) -> int
Reloaded.Memory.Pointers.FixedArrayPtr<T>.Pointer -> Reloaded.Memory.Pointers.Ptr<T>
Reloaded.Memory.Pointers.FixedArrayPtr<T>.Set(in T value) -> void
Reloaded.Memory.Pointers.FixedArrayPtr<T>.Set(int index, in T value) -> void
Reloaded.Memory.Pointers.FixedArrayPtr<T>.Set<TSource>(TSource source, in T value) -> void
Reloaded.Memory.Pointers.FixedArrayPtr<T>.Set<TSource>(TSource source, int index, in T value) -> void
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.ArraySize.get -> int
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.Contains(in T item) -> bool
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.Contains<TSource>(TSource source, in T item) -> bool
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.CopyFrom(System.Span<T> sourceArray, int length) -> void
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.CopyFrom(System.Span<T> sourceArray, int length, int sourceIndex, int destinationIndex) -> void
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.CopyFrom<TSource>(TSource source, System.Span<T> sourceArray, int length) -> void
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.CopyFrom<TSource>(TSource source, System.Span<T> sourceArray, int length, int sourceIndex, int destinationIndex) -> void
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.CopyTo(System.Span<T> destinationArray, int length) -> void
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.CopyTo(System.Span<T> destinationArray, int length, int sourceIndex, int destinationIndex) -> void
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.CopyTo<TSource>(TSource source, System.Span<T> destinationArray, int length) -> void
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.CopyTo<TSource>(TSource source, System.Span<T> destinationArray, int length, int sourceIndex, int destinationIndex) -> void
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.Count -> int
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.Get() -> T
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.Get(int index) -> T
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.Get(int index, out T value) -> void
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.Get(out T value) -> void
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.Get<TSource>(TSource source) -> T
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.Get<TSource>(TSource source, int index) -> T
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.Get<TSource>(TSource source, int index, out T value) -> void
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.Get<TSource>(TSource source, out T value) -> void
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.IndexOf(in T item) -> int
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.IndexOf<TSource>(TSource source, in T item) -> int
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.MarshalledFixedArrayPtr() -> void
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.MarshalledFixedArrayPtr(byte* address, int count) -> void
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.Pointer -> Reloaded.Memory.Pointers.MarshalledPtr<T>
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.Set(in T value) -> void
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.Set(int index, in T value) -> void
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.Set<TSource>(TSource source, in T value) -> void
Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>.Set<TSource>(TSource source, int index, in T value) -> void
Reloaded.Memory.Pointers.MarshalledPtr<T>
Reloaded.Memory.Pointers.MarshalledPtr<T>.ElementSize.get -> int
Reloaded.Memory.Pointers.MarshalledPtr<T>.Equals(Reloaded.Memory.Pointers.MarshalledPtr<T> other) -> bool
Reloaded.Memory.Pointers.MarshalledPtr<T>.Get() -> T
Reloaded.Memory.Pointers.MarshalledPtr<T>.Get(int index) -> T
Reloaded.Memory.Pointers.MarshalledPtr<T>.Get(int index, out T? value) -> void
Reloaded.Memory.Pointers.MarshalledPtr<T>.Get(out T? value) -> void
Reloaded.Memory.Pointers.MarshalledPtr<T>.Get<TSource>(TSource source) -> T
Reloaded.Memory.Pointers.MarshalledPtr<T>.Get<TSource>(TSource source, int index) -> T
Reloaded.Memory.Pointers.MarshalledPtr<T>.Get<TSource>(TSource source, int index, out T? value) -> void
Reloaded.Memory.Pointers.MarshalledPtr<T>.Get<TSource>(TSource source, out T? value) -> void
Reloaded.Memory.Pointers.MarshalledPtr<T>.MarshalledPtr() -> void
Reloaded.Memory.Pointers.MarshalledPtr<T>.MarshalledPtr(byte* pointer) -> void
Reloaded.Memory.Pointers.MarshalledPtr<T>.MarshalledPtr(byte* pointer, int elementSize) -> void
Reloaded.Memory.Pointers.MarshalledPtr<T>.Pointer -> byte*
Reloaded.Memory.Pointers.MarshalledPtr<T>.Set(in T value) -> void
Reloaded.Memory.Pointers.MarshalledPtr<T>.Set(int index, in T value) -> void
Reloaded.Memory.Pointers.MarshalledPtr<T>.Set<TSource>(TSource source, in T value) -> void
Reloaded.Memory.Pointers.MarshalledPtr<T>.Set<TSource>(TSource source, int index, in T value) -> void
Reloaded.Memory.Pointers.Ptr<T>
Reloaded.Memory.Pointers.Ptr<T>.AsRef() -> T
Reloaded.Memory.Pointers.Ptr<T>.Equals(Reloaded.Memory.Pointers.Ptr<T> other) -> bool
Reloaded.Memory.Pointers.Ptr<T>.Get() -> T
Reloaded.Memory.Pointers.Ptr<T>.Get(int index) -> T
Reloaded.Memory.Pointers.Ptr<T>.Get(int index, out T value) -> void
Reloaded.Memory.Pointers.Ptr<T>.Get(out T value) -> void
Reloaded.Memory.Pointers.Ptr<T>.Get<TSource>(TSource source) -> T
Reloaded.Memory.Pointers.Ptr<T>.Get<TSource>(TSource source, int index) -> T
Reloaded.Memory.Pointers.Ptr<T>.Get<TSource>(TSource source, int index, out T value) -> void
Reloaded.Memory.Pointers.Ptr<T>.Get<TSource>(TSource source, out T value) -> void
Reloaded.Memory.Pointers.Ptr<T>.Pointer -> T*
Reloaded.Memory.Pointers.Ptr<T>.Ptr() -> void
Reloaded.Memory.Pointers.Ptr<T>.Ptr(T* pointer) -> void
Reloaded.Memory.Pointers.Ptr<T>.Set(in T value) -> void
Reloaded.Memory.Pointers.Ptr<T>.Set(int index, in T value) -> void
Reloaded.Memory.Pointers.Ptr<T>.Set<TSource>(TSource source, in T value) -> void
Reloaded.Memory.Pointers.Ptr<T>.Set<TSource>(TSource source, int index, in T value) -> void
Reloaded.Memory.Pointers.Sourced.SourcedFixedArrayPtr<T, TSource>
Reloaded.Memory.Pointers.Sourced.SourcedFixedArrayPtr<T, TSource>.ArraySize.get -> int
Reloaded.Memory.Pointers.Sourced.SourcedFixedArrayPtr<T, TSource>.AsRef(int index) -> T
Reloaded.Memory.Pointers.Sourced.SourcedFixedArrayPtr<T, TSource>.Contains(in T item) -> bool
Reloaded.Memory.Pointers.Sourced.SourcedFixedArrayPtr<T, TSource>.CopyFrom(System.Span<T> sourceArray, int length) -> void
Reloaded.Memory.Pointers.Sourced.SourcedFixedArrayPtr<T, TSource>.CopyFrom(System.Span<T> sourceArray, int length, int sourceIndex, int destinationIndex) -> void
Reloaded.Memory.Pointers.Sourced.SourcedFixedArrayPtr<T, TSource>.CopyTo(System.Span<T> destinationArray, int length) -> void
Reloaded.Memory.Pointers.Sourced.SourcedFixedArrayPtr<T, TSource>.CopyTo(System.Span<T> destinationArray, int length, int sourceIndex, int destinationIndex) -> void
Reloaded.Memory.Pointers.Sourced.SourcedFixedArrayPtr<T, TSource>.Count.get -> int
Reloaded.Memory.Pointers.Sourced.SourcedFixedArrayPtr<T, TSource>.Count.set -> void
Reloaded.Memory.Pointers.Sourced.SourcedFixedArrayPtr<T, TSource>.Get(int index) -> T
Reloaded.Memory.Pointers.Sourced.SourcedFixedArrayPtr<T, TSource>.Get(int index, out T value) -> void
Reloaded.Memory.Pointers.Sourced.SourcedFixedArrayPtr<T, TSource>.Get(out T value) -> void
Reloaded.Memory.Pointers.Sourced.SourcedFixedArrayPtr<T, TSource>.GetEnumerator() -> System.Collections.Generic.IEnumerator<T>!
Reloaded.Memory.Pointers.Sourced.SourcedFixedArrayPtr<T, TSource>.IndexOf(in T item) -> int
Reloaded.Memory.Pointers.Sourced.SourcedFixedArrayPtr<T, TSource>.Pointer -> Reloaded.Memory.Pointers.FixedArrayPtr<T>
Reloaded.Memory.Pointers.Sourced.SourcedFixedArrayPtr<T, TSource>.Set(in T value) -> void
Reloaded.Memory.Pointers.Sourced.SourcedFixedArrayPtr<T, TSource>.Set(int index, in T value) -> void
Reloaded.Memory.Pointers.Sourced.SourcedFixedArrayPtr<T, TSource>.Source -> TSource
Reloaded.Memory.Pointers.Sourced.SourcedFixedArrayPtr<T, TSource>.SourcedFixedArrayPtr() -> void
Reloaded.Memory.Pointers.Sourced.SourcedFixedArrayPtr<T, TSource>.SourcedFixedArrayPtr(T* address, int count, TSource source) -> void
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledFixedArrayPtr<T, TSource>
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledFixedArrayPtr<T, TSource>.ArraySize.get -> int
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledFixedArrayPtr<T, TSource>.Contains(in T item) -> bool
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledFixedArrayPtr<T, TSource>.CopyFrom(System.Span<T> sourceArray, int length) -> void
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledFixedArrayPtr<T, TSource>.CopyFrom(System.Span<T> sourceArray, int length, int sourceIndex, int destinationIndex) -> void
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledFixedArrayPtr<T, TSource>.CopyTo(System.Span<T> destinationArray, int length) -> void
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledFixedArrayPtr<T, TSource>.CopyTo(System.Span<T> destinationArray, int length, int sourceIndex, int destinationIndex) -> void
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledFixedArrayPtr<T, TSource>.Count.get -> int
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledFixedArrayPtr<T, TSource>.Count.set -> void
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledFixedArrayPtr<T, TSource>.Get(int index) -> T
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledFixedArrayPtr<T, TSource>.Get(int index, out T value) -> void
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledFixedArrayPtr<T, TSource>.Get(out T value) -> void
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledFixedArrayPtr<T, TSource>.GetEnumerator() -> System.Collections.Generic.IEnumerator<T>!
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledFixedArrayPtr<T, TSource>.IndexOf(in T item) -> int
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledFixedArrayPtr<T, TSource>.Pointer -> Reloaded.Memory.Pointers.MarshalledFixedArrayPtr<T>
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledFixedArrayPtr<T, TSource>.Set(in T value) -> void
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledFixedArrayPtr<T, TSource>.Set(int index, in T value) -> void
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledFixedArrayPtr<T, TSource>.Source -> TSource
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledFixedArrayPtr<T, TSource>.SourcedMarshalledFixedArrayPtr() -> void
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledFixedArrayPtr<T, TSource>.SourcedMarshalledFixedArrayPtr(T* address, int count, TSource source) -> void
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>.Equals(Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource> other) -> bool
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>.Get() -> T
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>.Get(int index) -> T
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>.Get(int index, out T value) -> void
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>.Get(out T value) -> void
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>.Pointer -> Reloaded.Memory.Pointers.MarshalledPtr<T>
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>.Set(in T value) -> void
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>.Set(int index, in T value) -> void
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>.Source -> TSource
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>.SourcedMarshalledPtr() -> void
Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>.SourcedMarshalledPtr(byte* pointer, TSource source) -> void
Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>
Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>.AsRef() -> T
Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>.Equals(Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource> other) -> bool
Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>.Get() -> T
Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>.Get(int index) -> T
Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>.Get(int index, out T value) -> void
Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>.Get(out T value) -> void
Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>.Pointer -> Reloaded.Memory.Pointers.Ptr<T>
Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>.Set(in T value) -> void
Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>.Set(int index, in T value) -> void
Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>.Source -> TSource
Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>.SourcedPtr() -> void
Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>.SourcedPtr(Reloaded.Memory.Pointers.Ptr<T> pointer, TSource source) -> void
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.Advance(long offset) -> void
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.BaseStream.get -> TStream!
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.BigEndianBufferedStreamReader() -> void
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.BufferedBytesAvailable.get -> int
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.CurrentBufferSize.get -> int
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.IsEndOfStream.get -> bool
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.Peek(out byte value) -> void
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.Peek(out double value) -> void
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.Peek(out float value) -> void
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.Peek(out int value) -> void
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.Peek(out long value) -> void
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.Peek(out sbyte value) -> void
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.Peek(out short value) -> void
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.Peek(out uint value) -> void
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.Peek(out ulong value) -> void
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.Peek(out ushort value) -> void
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.PeekByte() -> byte
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.PeekDouble() -> double
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.PeekInt16() -> short
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.PeekInt32() -> int
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.PeekInt64() -> long
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.PeekSByte() -> sbyte
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.PeekSingle() -> float
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.PeekStruct<T>() -> T
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.PeekStruct<T>(out T result) -> void
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.PeekUInt16() -> ushort
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.PeekUInt32() -> uint
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.PeekUInt64() -> ulong
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.Position.get -> long
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.Read(out byte value) -> void
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.Read(out double value) -> void
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.Read(out float value) -> void
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.Read(out int value) -> void
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.Read(out long value) -> void
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.Read(out sbyte value) -> void
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.Read(out short value) -> void
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.Read(out uint value) -> void
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.Read(out ulong value) -> void
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.Read(out ushort value) -> void
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.ReadByte() -> byte
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.ReadBytesUnbuffered(long offset, System.Span<byte> data) -> int
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.ReadDouble() -> double
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.ReadInt16() -> short
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.ReadInt32() -> int
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.ReadInt64() -> long
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.ReadRaw(int length, out int available) -> byte*
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.ReadRaw<T>(int numItems, out int available) -> T*
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.ReadRaw<T>(System.Span<T> buffer) -> int
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.ReadRaw<T>(T* buffer, int numItems) -> int
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.ReadSByte() -> sbyte
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.ReadSingle() -> float
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.ReadStruct<T>() -> T
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.ReadStruct<T>(out T result) -> void
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.ReadUInt16() -> ushort
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.ReadUInt32() -> uint
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.ReadUInt64() -> ulong
Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.Seek(long offset, System.IO.SeekOrigin origin) -> void
Reloaded.Memory.Streams.BigEndianReader
Reloaded.Memory.Streams.BigEndianReader.BigEndianReader() -> void
Reloaded.Memory.Streams.BigEndianReader.BigEndianReader(byte* ptr) -> void
Reloaded.Memory.Streams.BigEndianReader.Ptr -> byte*
Reloaded.Memory.Streams.BigEndianReader.Read<T>() -> T
Reloaded.Memory.Streams.BigEndianReader.Read<T>(ref T item) -> void
Reloaded.Memory.Streams.BigEndianReader.ReadByte() -> byte
Reloaded.Memory.Streams.BigEndianReader.ReadByteAtOffset(int offset) -> byte
Reloaded.Memory.Streams.BigEndianReader.ReadDouble() -> double
Reloaded.Memory.Streams.BigEndianReader.ReadDoubleAtOffset(int offset) -> double
Reloaded.Memory.Streams.BigEndianReader.ReadFloat() -> float
Reloaded.Memory.Streams.BigEndianReader.ReadFloatAtOffset(int offset) -> float
Reloaded.Memory.Streams.BigEndianReader.ReadInt() -> int
Reloaded.Memory.Streams.BigEndianReader.ReadIntAtOffset(int offset) -> int
Reloaded.Memory.Streams.BigEndianReader.ReadLong() -> long
Reloaded.Memory.Streams.BigEndianReader.ReadLongAtOffset(int offset) -> long
Reloaded.Memory.Streams.BigEndianReader.ReadSByte() -> sbyte
Reloaded.Memory.Streams.BigEndianReader.ReadSByteAtOffset(int offset) -> sbyte
Reloaded.Memory.Streams.BigEndianReader.ReadShort() -> short
Reloaded.Memory.Streams.BigEndianReader.ReadShortAtOffset(int offset) -> short
Reloaded.Memory.Streams.BigEndianReader.ReadUInt() -> uint
Reloaded.Memory.Streams.BigEndianReader.ReadUIntAtOffset(int offset) -> uint
Reloaded.Memory.Streams.BigEndianReader.ReadULong() -> ulong
Reloaded.Memory.Streams.BigEndianReader.ReadULongAtOffset(int offset) -> ulong
Reloaded.Memory.Streams.BigEndianReader.ReadUShort() -> ushort
Reloaded.Memory.Streams.BigEndianReader.ReadUShortAtOffset(int offset) -> ushort
Reloaded.Memory.Streams.BigEndianReader.Seek(int offset) -> void
Reloaded.Memory.Streams.BigEndianWriter
Reloaded.Memory.Streams.BigEndianWriter.BigEndianWriter() -> void
Reloaded.Memory.Streams.BigEndianWriter.BigEndianWriter(byte* ptr) -> void
Reloaded.Memory.Streams.BigEndianWriter.Ptr -> byte*
Reloaded.Memory.Streams.BigEndianWriter.Seek(int offset) -> void
Reloaded.Memory.Streams.BigEndianWriter.Write(byte value) -> void
Reloaded.Memory.Streams.BigEndianWriter.Write(double value) -> void
Reloaded.Memory.Streams.BigEndianWriter.Write(float value) -> void
Reloaded.Memory.Streams.BigEndianWriter.Write(int value) -> void
Reloaded.Memory.Streams.BigEndianWriter.Write(long value) -> void
Reloaded.Memory.Streams.BigEndianWriter.Write(sbyte value) -> void
Reloaded.Memory.Streams.BigEndianWriter.Write(short value) -> void
Reloaded.Memory.Streams.BigEndianWriter.Write(System.Span<byte> data) -> void
Reloaded.Memory.Streams.BigEndianWriter.Write(uint value) -> void
Reloaded.Memory.Streams.BigEndianWriter.Write(ulong value) -> void
Reloaded.Memory.Streams.BigEndianWriter.Write(ushort value) -> void
Reloaded.Memory.Streams.BigEndianWriter.Write<T>(in T item) -> void
Reloaded.Memory.Streams.BigEndianWriter.WriteAtOffset(byte value, int offset) -> void
Reloaded.Memory.Streams.BigEndianWriter.WriteAtOffset(double value, int offset) -> void
Reloaded.Memory.Streams.BigEndianWriter.WriteAtOffset(float value, int offset) -> void
Reloaded.Memory.Streams.BigEndianWriter.WriteAtOffset(int value, int offset) -> void
Reloaded.Memory.Streams.BigEndianWriter.WriteAtOffset(long value, int offset) -> void
Reloaded.Memory.Streams.BigEndianWriter.WriteAtOffset(sbyte value, int offset) -> void
Reloaded.Memory.Streams.BigEndianWriter.WriteAtOffset(short value, int offset) -> void
Reloaded.Memory.Streams.BigEndianWriter.WriteAtOffset(uint value, int offset) -> void
Reloaded.Memory.Streams.BigEndianWriter.WriteAtOffset(ulong value, int offset) -> void
Reloaded.Memory.Streams.BigEndianWriter.WriteAtOffset(ushort value, int offset) -> void
Reloaded.Memory.Streams.BufferedStreamReader<TStream>
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.Advance(long offset) -> void
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.AsBigEndian() -> Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream!>
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.AsLittleEndian() -> Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream!>
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.BaseStream.get -> TStream!
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.BufferedBytesAvailable.get -> int
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.BufferedStreamReader(TStream! stream, int bufferSize = 65536) -> void
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.CurrentBufferSize.get -> int
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.Dispose() -> void
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.IsEndOfStream.get -> bool
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.OnEndOfStream -> System.Action?
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.Peek<T>() -> T
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.Peek<T>(out T value) -> void
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekBigEndian(out double value) -> double
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekBigEndian(out float value) -> float
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekBigEndian(out int value) -> int
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekBigEndian(out long value) -> long
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekBigEndian(out short value) -> short
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekBigEndian(out uint value) -> uint
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekBigEndian(out ulong value) -> ulong
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekBigEndian(out ushort value) -> ushort
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekBigEndianDouble() -> double
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekBigEndianInt16() -> short
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekBigEndianInt32() -> int
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekBigEndianInt64() -> long
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekBigEndianSingle() -> float
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekBigEndianStruct<T>() -> T
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekBigEndianStruct<T>(out T value) -> void
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekBigEndianUInt16() -> ushort
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekBigEndianUInt32() -> uint
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekBigEndianUInt64() -> ulong
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekLittleEndian(out double value) -> double
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekLittleEndian(out float value) -> float
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekLittleEndian(out int value) -> int
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekLittleEndian(out long value) -> long
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekLittleEndian(out short value) -> short
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekLittleEndian(out uint value) -> uint
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekLittleEndian(out ulong value) -> ulong
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekLittleEndian(out ushort value) -> ushort
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekLittleEndianDouble() -> double
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekLittleEndianInt16() -> short
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekLittleEndianInt32() -> int
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekLittleEndianInt64() -> long
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekLittleEndianSingle() -> float
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekLittleEndianStruct<T>() -> T
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekLittleEndianStruct<T>(out T value) -> void
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekLittleEndianUInt16() -> ushort
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekLittleEndianUInt32() -> uint
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekLittleEndianUInt64() -> ulong
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekMarshalled<T>() -> T
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.PeekMarshalled<T>(out T value) -> void
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.Position.get -> long
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.Read<T>() -> T
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.Read<T>(out T value) -> void
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadBigEndian(out double value) -> double
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadBigEndian(out float value) -> float
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadBigEndian(out int value) -> int
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadBigEndian(out long value) -> long
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadBigEndian(out short value) -> short
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadBigEndian(out uint value) -> uint
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadBigEndian(out ulong value) -> ulong
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadBigEndian(out ushort value) -> ushort
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadBigEndianDouble() -> double
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadBigEndianInt16() -> short
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadBigEndianInt32() -> int
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadBigEndianInt64() -> long
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadBigEndianSingle() -> float
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadBigEndianStruct<T>() -> T
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadBigEndianStruct<T>(out T value) -> void
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadBigEndianUInt16() -> ushort
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadBigEndianUInt32() -> uint
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadBigEndianUInt64() -> ulong
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadBytesUnbuffered(long offset, System.Span<byte> data) -> int
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadLittleEndian(out double value) -> double
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadLittleEndian(out float value) -> float
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadLittleEndian(out int value) -> int
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadLittleEndian(out long value) -> long
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadLittleEndian(out short value) -> short
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadLittleEndian(out uint value) -> uint
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadLittleEndian(out ulong value) -> ulong
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadLittleEndian(out ushort value) -> ushort
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadLittleEndianDouble() -> double
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadLittleEndianInt16() -> short
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadLittleEndianInt32() -> int
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadLittleEndianInt64() -> long
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadLittleEndianSingle() -> float
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadLittleEndianStruct<T>() -> T
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadLittleEndianStruct<T>(out T value) -> void
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadLittleEndianUInt16() -> ushort
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadLittleEndianUInt32() -> uint
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadLittleEndianUInt64() -> ulong
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadMarshalled<T>() -> T
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadRaw(int length, out int available) -> byte*
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadRaw<T>(int numItems, out int available) -> T*
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadRaw<T>(System.Span<T> buffer) -> int
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.ReadRaw<T>(T* buffer, int numItems) -> int
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.Seek(long offset, System.IO.SeekOrigin origin) -> void
Reloaded.Memory.Streams.BufferedStreamReader<TStream>.~BufferedStreamReader() -> void
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.Advance(long offset) -> void
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.BaseStream.get -> TStream!
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.BufferedBytesAvailable.get -> int
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.CurrentBufferSize.get -> int
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.IsEndOfStream.get -> bool
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.LittleEndianBufferedStreamReader() -> void
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.Peek(out byte value) -> void
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.Peek(out double value) -> void
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.Peek(out float value) -> void
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.Peek(out int value) -> void
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.Peek(out long value) -> void
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.Peek(out sbyte value) -> void
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.Peek(out short value) -> void
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.Peek(out uint value) -> void
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.Peek(out ulong value) -> void
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.Peek(out ushort value) -> void
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.PeekByte() -> byte
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.PeekDouble() -> double
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.PeekInt16() -> short
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.PeekInt32() -> int
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.PeekInt64() -> long
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.PeekSByte() -> sbyte
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.PeekSingle() -> float
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.PeekStruct<T>() -> T
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.PeekStruct<T>(out T result) -> void
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.PeekUInt16() -> ushort
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.PeekUInt32() -> uint
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.PeekUInt64() -> ulong
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.Position.get -> long
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.Read(out byte value) -> void
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.Read(out double value) -> void
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.Read(out float value) -> void
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.Read(out int value) -> void
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.Read(out long value) -> void
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.Read(out sbyte value) -> void
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.Read(out short value) -> void
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.Read(out uint value) -> void
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.Read(out ulong value) -> void
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.Read(out ushort value) -> void
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.ReadByte() -> byte
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.ReadBytesUnbuffered(long offset, System.Span<byte> data) -> int
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.ReadDouble() -> double
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.ReadInt16() -> short
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.ReadInt32() -> int
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.ReadInt64() -> long
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.ReadRaw(int length, out int available) -> byte*
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.ReadRaw<T>(int numItems, out int available) -> T*
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.ReadRaw<T>(System.Span<T> buffer) -> int
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.ReadRaw<T>(T* buffer, int numItems) -> int
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.ReadSByte() -> sbyte
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.ReadSingle() -> float
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.ReadStruct<T>() -> T
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.ReadStruct<T>(out T result) -> void
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.ReadUInt16() -> ushort
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.ReadUInt32() -> uint
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.ReadUInt64() -> ulong
Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.Seek(long offset, System.IO.SeekOrigin origin) -> void
Reloaded.Memory.Streams.LittleEndianReader
Reloaded.Memory.Streams.LittleEndianReader.LittleEndianReader() -> void
Reloaded.Memory.Streams.LittleEndianReader.LittleEndianReader(byte* ptr) -> void
Reloaded.Memory.Streams.LittleEndianReader.Ptr -> byte*
Reloaded.Memory.Streams.LittleEndianReader.Read<T>() -> T
Reloaded.Memory.Streams.LittleEndianReader.Read<T>(ref T item) -> void
Reloaded.Memory.Streams.LittleEndianReader.ReadByte() -> byte
Reloaded.Memory.Streams.LittleEndianReader.ReadByteAtOffset(int offset) -> byte
Reloaded.Memory.Streams.LittleEndianReader.ReadDouble() -> double
Reloaded.Memory.Streams.LittleEndianReader.ReadDoubleAtOffset(int offset) -> double
Reloaded.Memory.Streams.LittleEndianReader.ReadFloat() -> float
Reloaded.Memory.Streams.LittleEndianReader.ReadFloatAtOffset(int offset) -> float
Reloaded.Memory.Streams.LittleEndianReader.ReadInt() -> int
Reloaded.Memory.Streams.LittleEndianReader.ReadIntAtOffset(int offset) -> int
Reloaded.Memory.Streams.LittleEndianReader.ReadLong() -> long
Reloaded.Memory.Streams.LittleEndianReader.ReadLongAtOffset(int offset) -> long
Reloaded.Memory.Streams.LittleEndianReader.ReadSByte() -> sbyte
Reloaded.Memory.Streams.LittleEndianReader.ReadSByteAtOffset(int offset) -> sbyte
Reloaded.Memory.Streams.LittleEndianReader.ReadShort() -> short
Reloaded.Memory.Streams.LittleEndianReader.ReadShortAtOffset(int offset) -> short
Reloaded.Memory.Streams.LittleEndianReader.ReadUInt() -> uint
Reloaded.Memory.Streams.LittleEndianReader.ReadUIntAtOffset(int offset) -> uint
Reloaded.Memory.Streams.LittleEndianReader.ReadULong() -> ulong
Reloaded.Memory.Streams.LittleEndianReader.ReadULongAtOffset(int offset) -> ulong
Reloaded.Memory.Streams.LittleEndianReader.ReadUShort() -> ushort
Reloaded.Memory.Streams.LittleEndianReader.ReadUShortAtOffset(int offset) -> ushort
Reloaded.Memory.Streams.LittleEndianReader.Seek(int offset) -> void
Reloaded.Memory.Streams.LittleEndianWriter
Reloaded.Memory.Streams.LittleEndianWriter.LittleEndianWriter() -> void
Reloaded.Memory.Streams.LittleEndianWriter.LittleEndianWriter(byte* ptr) -> void
Reloaded.Memory.Streams.LittleEndianWriter.Ptr -> byte*
Reloaded.Memory.Streams.LittleEndianWriter.Seek(int offset) -> void
Reloaded.Memory.Streams.LittleEndianWriter.Write(byte value) -> void
Reloaded.Memory.Streams.LittleEndianWriter.Write(double value) -> void
Reloaded.Memory.Streams.LittleEndianWriter.Write(float value) -> void
Reloaded.Memory.Streams.LittleEndianWriter.Write(int value) -> void
Reloaded.Memory.Streams.LittleEndianWriter.Write(long value) -> void
Reloaded.Memory.Streams.LittleEndianWriter.Write(sbyte value) -> void
Reloaded.Memory.Streams.LittleEndianWriter.Write(short value) -> void
Reloaded.Memory.Streams.LittleEndianWriter.Write(System.Span<byte> data) -> void
Reloaded.Memory.Streams.LittleEndianWriter.Write(uint value) -> void
Reloaded.Memory.Streams.LittleEndianWriter.Write(ulong value) -> void
Reloaded.Memory.Streams.LittleEndianWriter.Write(ushort value) -> void
Reloaded.Memory.Streams.LittleEndianWriter.Write<T>(in T item) -> void
Reloaded.Memory.Streams.LittleEndianWriter.WriteAtOffset(byte value, int offset) -> void
Reloaded.Memory.Streams.LittleEndianWriter.WriteAtOffset(double value, int offset) -> void
Reloaded.Memory.Streams.LittleEndianWriter.WriteAtOffset(float value, int offset) -> void
Reloaded.Memory.Streams.LittleEndianWriter.WriteAtOffset(int value, int offset) -> void
Reloaded.Memory.Streams.LittleEndianWriter.WriteAtOffset(long value, int offset) -> void
Reloaded.Memory.Streams.LittleEndianWriter.WriteAtOffset(sbyte value, int offset) -> void
Reloaded.Memory.Streams.LittleEndianWriter.WriteAtOffset(short value, int offset) -> void
Reloaded.Memory.Streams.LittleEndianWriter.WriteAtOffset(uint value, int offset) -> void
Reloaded.Memory.Streams.LittleEndianWriter.WriteAtOffset(ulong value, int offset) -> void
Reloaded.Memory.Streams.LittleEndianWriter.WriteAtOffset(ushort value, int offset) -> void
Reloaded.Memory.Structs.DisposableMemoryAllocation<TAllocator>
Reloaded.Memory.Structs.DisposableMemoryAllocation<TAllocator>.Allocation.get -> Reloaded.Memory.Structs.MemoryAllocation
Reloaded.Memory.Structs.DisposableMemoryAllocation<TAllocator>.Allocation.init -> void
Reloaded.Memory.Structs.DisposableMemoryAllocation<TAllocator>.Allocator.get -> TAllocator
Reloaded.Memory.Structs.DisposableMemoryAllocation<TAllocator>.Allocator.init -> void
Reloaded.Memory.Structs.DisposableMemoryAllocation<TAllocator>.DisposableMemoryAllocation() -> void
Reloaded.Memory.Structs.DisposableMemoryAllocation<TAllocator>.Dispose() -> void
Reloaded.Memory.Structs.DisposableMemoryProtection<TProtector>
Reloaded.Memory.Structs.DisposableMemoryProtection<TProtector>.DisposableMemoryProtection() -> void
Reloaded.Memory.Structs.DisposableMemoryProtection<TProtector>.Dispose() -> void
Reloaded.Memory.Structs.DisposableMemoryProtection<TProtector>.MemoryAddress.get -> nuint
Reloaded.Memory.Structs.DisposableMemoryProtection<TProtector>.MemoryAddress.init -> void
Reloaded.Memory.Structs.DisposableMemoryProtection<TProtector>.OriginalProtection.get -> nuint
Reloaded.Memory.Structs.DisposableMemoryProtection<TProtector>.OriginalProtection.init -> void
Reloaded.Memory.Structs.DisposableMemoryProtection<TProtector>.Protector.get -> TProtector
Reloaded.Memory.Structs.DisposableMemoryProtection<TProtector>.Protector.init -> void
Reloaded.Memory.Structs.DisposableMemoryProtection<TProtector>.Size.get -> int
Reloaded.Memory.Structs.DisposableMemoryProtection<TProtector>.Size.init -> void
Reloaded.Memory.Structs.MemoryAllocation
Reloaded.Memory.Structs.MemoryAllocation.Address -> nuint
Reloaded.Memory.Structs.MemoryAllocation.Length -> nuint
Reloaded.Memory.Structs.MemoryAllocation.MemoryAllocation() -> void
Reloaded.Memory.Structs.MemoryAllocation.MemoryAllocation(System.UIntPtr address, System.UIntPtr length) -> void
Reloaded.Memory.Utilities.ArrayRental
Reloaded.Memory.Utilities.ArrayRental.Array.get -> byte[]!
Reloaded.Memory.Utilities.ArrayRental.ArrayRental() -> void
Reloaded.Memory.Utilities.ArrayRental.ArrayRental(int numBytes) -> void
Reloaded.Memory.Utilities.ArrayRental.Dispose() -> void
Reloaded.Memory.Utilities.ArrayRental.Span.get -> System.Span<byte>
Reloaded.Memory.Utilities.ArrayRentalSlice
Reloaded.Memory.Utilities.ArrayRentalSlice.ArrayRentalSlice() -> void
Reloaded.Memory.Utilities.ArrayRentalSlice.ArrayRentalSlice(Reloaded.Memory.Utilities.ArrayRental rental, int length) -> void
Reloaded.Memory.Utilities.ArrayRentalSlice.Dispose() -> void
Reloaded.Memory.Utilities.ArrayRentalSlice.Length.get -> int
Reloaded.Memory.Utilities.ArrayRentalSlice.Rental.get -> Reloaded.Memory.Utilities.ArrayRental
Reloaded.Memory.Utilities.ArrayRentalSlice.Span.get -> System.Span<byte>
Reloaded.Memory.Utilities.Box<T>
Reloaded.Memory.Utilities.BoxExtensions
Reloaded.Memory.Utilities.CircularBuffer
Reloaded.Memory.Utilities.CircularBuffer.Add(byte* data, uint length) -> nuint
Reloaded.Memory.Utilities.CircularBuffer.Add<T>(T value) -> nuint
Reloaded.Memory.Utilities.CircularBuffer.Add<TSource, T>(TSource source, T value) -> nuint
Reloaded.Memory.Utilities.CircularBuffer.Add<TSource>(TSource source, byte* data, uint length) -> nuint
Reloaded.Memory.Utilities.CircularBuffer.CanItemFit(uint itemSize) -> Reloaded.Memory.Utilities.CircularBuffer.ItemFit
Reloaded.Memory.Utilities.CircularBuffer.CanItemFit<T>() -> Reloaded.Memory.Utilities.CircularBuffer.ItemFit
Reloaded.Memory.Utilities.CircularBuffer.CircularBuffer(nuint start, int size) -> void
Reloaded.Memory.Utilities.CircularBuffer.Current.get -> nuint
Reloaded.Memory.Utilities.CircularBuffer.End.get -> nuint
Reloaded.Memory.Utilities.CircularBuffer.ItemFit
Reloaded.Memory.Utilities.CircularBuffer.ItemFit.No = 2 -> Reloaded.Memory.Utilities.CircularBuffer.ItemFit
Reloaded.Memory.Utilities.CircularBuffer.ItemFit.StartOfBuffer = 1 -> Reloaded.Memory.Utilities.CircularBuffer.ItemFit
Reloaded.Memory.Utilities.CircularBuffer.ItemFit.Yes = 0 -> Reloaded.Memory.Utilities.CircularBuffer.ItemFit
Reloaded.Memory.Utilities.CircularBuffer.Remaining.get -> nuint
Reloaded.Memory.Utilities.CircularBuffer.Size.get -> nuint
Reloaded.Memory.Utilities.CircularBuffer.Start.get -> nuint
Reloaded.Memory.Utilities.Endian
Reloaded.Memory.Utilities.ObjectMarshal
Reloaded.Memory.Utilities.Pinnable<T>
Reloaded.Memory.Utilities.Pinnable<T>.Dispose() -> void
Reloaded.Memory.Utilities.Pinnable<T>.Pinnable(in T value) -> void
Reloaded.Memory.Utilities.Pinnable<T>.Pinnable(T[]! value) -> void
Reloaded.Memory.Utilities.Pinnable<T>.Pointer.get -> T*
Reloaded.Memory.Utilities.Pinnable<T>.Value.get -> T
Reloaded.Memory.Utilities.Pinnable<T>.~Pinnable() -> void
Reloaded.Memory.Utilities.TypeInfo
static extern Reloaded.Memory.Native.Unix.Posix.mmap(nuint addr, nuint length, int prot, int flags, int fd, long offset) -> System.IntPtr
static extern Reloaded.Memory.Native.Unix.Posix.mprotect(nuint addr, System.UIntPtr len, Reloaded.Memory.Native.Unix.UnixMemoryProtection prot) -> int
static extern Reloaded.Memory.Native.Unix.Posix.munmap(nuint addr, nuint length) -> int
static extern Reloaded.Memory.Native.Unix.Posix.process_vm_readv(int pid, Reloaded.Memory.Native.Unix.Posix.IoVec* local_iov, ulong liovcnt, Reloaded.Memory.Native.Unix.Posix.IoVec* remote_iov, ulong riovcnt, ulong flags) -> System.IntPtr
static extern Reloaded.Memory.Native.Unix.Posix.process_vm_writev(int pid, Reloaded.Memory.Native.Unix.Posix.IoVec* local_iov, ulong liovcnt, Reloaded.Memory.Native.Unix.Posix.IoVec* remote_iov, ulong riovcnt, ulong flags) -> System.IntPtr
static extern Reloaded.Memory.Native.Unix.Posix.sysconf(int name) -> long
static extern Reloaded.Memory.Native.Windows.Kernel32.ReadProcessMemory(System.IntPtr hProcess, System.UIntPtr lpBaseAddress, System.UIntPtr lpBuffer, System.UIntPtr nSize, out System.UIntPtr lpNumberOfBytesRead) -> bool
static extern Reloaded.Memory.Native.Windows.Kernel32.VirtualAlloc(System.UIntPtr lpAddress, System.UIntPtr dwSize, Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE flAllocationType, Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION flProtect) -> nuint
static extern Reloaded.Memory.Native.Windows.Kernel32.VirtualAllocEx(System.IntPtr hProcess, System.UIntPtr lpAddress, System.UIntPtr dwSize, Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE flAllocationType, Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION flProtect) -> nuint
static extern Reloaded.Memory.Native.Windows.Kernel32.VirtualFree(System.UIntPtr lpAddress, System.UIntPtr dwSize, Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE dwFreeType) -> bool
static extern Reloaded.Memory.Native.Windows.Kernel32.VirtualFreeEx(System.IntPtr hProcess, System.UIntPtr lpAddress, System.UIntPtr dwSize, Reloaded.Memory.Native.Windows.Kernel32.MEM_ALLOCATION_TYPE dwFreeType) -> bool
static extern Reloaded.Memory.Native.Windows.Kernel32.VirtualProtect(System.UIntPtr lpAddress, System.UIntPtr dwSize, Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION flNewProtect, out Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION lpflOldProtect) -> bool
static extern Reloaded.Memory.Native.Windows.Kernel32.VirtualProtectEx(System.IntPtr hProcess, System.UIntPtr lpAddress, System.UIntPtr dwSize, Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION flNewProtect, out Reloaded.Memory.Native.Windows.Kernel32.MEM_PROTECTION lpflOldProtect) -> bool
static extern Reloaded.Memory.Native.Windows.Kernel32.WriteProcessMemory(System.IntPtr hProcess, System.UIntPtr lpBaseAddress, System.UIntPtr lpBuffer, System.UIntPtr nSize, out System.UIntPtr lpNumberOfBytesWritten) -> bool
static readonly Reloaded.Memory.Memory.Instance -> Reloaded.Memory.Memory
static Reloaded.Memory.Enums.MemoryProtectionExtensions.ToCurrentPlatform(this Reloaded.Memory.Enums.MemoryProtection protection) -> nuint
static Reloaded.Memory.Extensions.ArrayExtensions.AsSpanFast<T>(this T[]! data) -> System.Span<T>
static Reloaded.Memory.Extensions.ArrayExtensions.AsSpanFast<T>(this T[]! data, int offset) -> System.Span<T>
static Reloaded.Memory.Extensions.ArrayExtensions.AsSpanFast<T>(this T[]! data, int offset, int length) -> System.Span<T>
static Reloaded.Memory.Extensions.ArrayExtensions.AsSpanFast<T>(this T[]! data, System.Index index) -> System.Span<T>
static Reloaded.Memory.Extensions.ArrayExtensions.AsSpanFast<T>(this T[]! data, System.Range range) -> System.Span<T>
static Reloaded.Memory.Extensions.ArrayExtensions.Count<T>(this T[]! array, T value) -> int
static Reloaded.Memory.Extensions.ArrayExtensions.DangerousGetReference<T>(this T[]! array) -> T
static Reloaded.Memory.Extensions.ArrayExtensions.DangerousGetReferenceAt<T>(this T[]! array, int i) -> T
static Reloaded.Memory.Extensions.ArrayExtensions.IsCovariant<T>(this T[]! array) -> bool
static Reloaded.Memory.Extensions.BoolExtensions.ToBitwiseMask32(this bool flag) -> int
static Reloaded.Memory.Extensions.BoolExtensions.ToBitwiseMask64(this bool flag) -> long
static Reloaded.Memory.Extensions.BoolExtensions.ToByte(this bool flag) -> byte
static Reloaded.Memory.Extensions.EnumExtensions.HasFlagFast<T>(this T value, T flag) -> bool
static Reloaded.Memory.Extensions.SpanExtensions.AsBytes<T>(this System.ReadOnlySpan<T> span) -> System.ReadOnlySpan<byte>
static Reloaded.Memory.Extensions.SpanExtensions.AsBytes<T>(this System.Span<T> span) -> System.Span<byte>
static Reloaded.Memory.Extensions.SpanExtensions.Cast<TFrom, TTo>(this System.ReadOnlySpan<TFrom> span) -> System.ReadOnlySpan<TTo>
static Reloaded.Memory.Extensions.SpanExtensions.Cast<TFrom, TTo>(this System.Span<TFrom> span) -> System.Span<TTo>
static Reloaded.Memory.Extensions.SpanExtensions.CastFast<TFrom, TTo>(this System.ReadOnlySpan<TFrom> data) -> System.ReadOnlySpan<TTo>
static Reloaded.Memory.Extensions.SpanExtensions.CastFast<TFrom, TTo>(this System.Span<TFrom> data) -> System.Span<TTo>
static Reloaded.Memory.Extensions.SpanExtensions.Count<T>(this System.ReadOnlySpan<T> span, T value) -> int
static Reloaded.Memory.Extensions.SpanExtensions.Count<T>(this System.Span<T> span, T value) -> int
static Reloaded.Memory.Extensions.SpanExtensions.DangerousGetReference<T>(this System.ReadOnlySpan<T> span) -> T
static Reloaded.Memory.Extensions.SpanExtensions.DangerousGetReference<T>(this System.Span<T> span) -> T
static Reloaded.Memory.Extensions.SpanExtensions.DangerousGetReferenceAt<T>(this System.ReadOnlySpan<T> span, int i) -> T
static Reloaded.Memory.Extensions.SpanExtensions.DangerousGetReferenceAt<T>(this System.ReadOnlySpan<T> span, nint i) -> T
static Reloaded.Memory.Extensions.SpanExtensions.DangerousGetReferenceAt<T>(this System.Span<T> span, int i) -> T
static Reloaded.Memory.Extensions.SpanExtensions.DangerousGetReferenceAt<T>(this System.Span<T> span, nint i) -> T
static Reloaded.Memory.Extensions.SpanExtensions.FindAllOffsetsOfByte(this System.ReadOnlySpan<byte> data, byte value) -> System.Collections.Generic.List<int>!
static Reloaded.Memory.Extensions.SpanExtensions.FindAllOffsetsOfByte(this System.ReadOnlySpan<byte> data, byte value, int offsetCountHint) -> System.Collections.Generic.List<int>!
static Reloaded.Memory.Extensions.SpanExtensions.IndexOf<T>(this System.ReadOnlySpan<T> span, ref T value) -> int
static Reloaded.Memory.Extensions.SpanExtensions.IndexOf<T>(this System.Span<T> span, ref T value) -> int
static Reloaded.Memory.Extensions.SpanExtensions.Replace(this System.Span<char> data, char oldValue, char newValue, System.Span<char> buffer) -> System.Span<char>
static Reloaded.Memory.Extensions.SpanExtensions.Replace<T>(this System.Span<T> data, T oldValue, T newValue, System.Span<T> buffer) -> System.Span<T>
static Reloaded.Memory.Extensions.SpanExtensions.SliceFast<T>(this System.ReadOnlySpan<T> data, int start) -> System.ReadOnlySpan<T>
static Reloaded.Memory.Extensions.SpanExtensions.SliceFast<T>(this System.ReadOnlySpan<T> data, int start, int length) -> System.ReadOnlySpan<T>
static Reloaded.Memory.Extensions.SpanExtensions.SliceFast<T>(this System.ReadOnlySpan<T> data, System.Range range) -> System.ReadOnlySpan<T>
static Reloaded.Memory.Extensions.SpanExtensions.SliceFast<T>(this System.Span<T> data, int start) -> System.Span<T>
static Reloaded.Memory.Extensions.SpanExtensions.SliceFast<T>(this System.Span<T> data, int start, int length) -> System.Span<T>
static Reloaded.Memory.Extensions.SpanExtensions.SliceFast<T>(this System.Span<T> data, System.Range range) -> System.Span<T>
static Reloaded.Memory.Extensions.StreamExtensions.AddPadding<TStream>(this TStream! stream, byte value, int alignment = 2048) -> void
static Reloaded.Memory.Extensions.StreamExtensions.AddPadding<TStream>(this TStream! stream, int alignment) -> void
static Reloaded.Memory.Extensions.StreamExtensions.Read<TStream, T>(this TStream! stream, out T result) -> void
static Reloaded.Memory.Extensions.StreamExtensions.Read<TStream, T>(this TStream! stream, System.Span<T> output) -> void
static Reloaded.Memory.Extensions.StreamExtensions.Read<TStream, T>(this TStream! stream, T[]! output) -> void
static Reloaded.Memory.Extensions.StreamExtensions.ReadMarshalled<TStream, T>(this TStream! stream, out T result) -> void
static Reloaded.Memory.Extensions.StreamExtensions.ReadMarshalled<TStream, T>(this TStream! stream, System.Span<T> output) -> void
static Reloaded.Memory.Extensions.StreamExtensions.ReadMarshalled<TStream, T>(this TStream! stream, T[]! output) -> void
static Reloaded.Memory.Extensions.StreamExtensions.Write<TStream, T>(this TStream! stream, in T structure) -> void
static Reloaded.Memory.Extensions.StreamExtensions.Write<TStream, T>(this TStream! stream, System.Span<T> structure) -> void
static Reloaded.Memory.Extensions.StreamExtensions.WriteMarshalled<TStream, T>(this TStream! stream, System.Span<T> item) -> void
static Reloaded.Memory.Extensions.StreamExtensions.WriteMarshalled<TStream, T>(this TStream! stream, T item) -> void
static Reloaded.Memory.Extensions.StreamExtensions.WriteMarshalled<TStream, T>(this TStream! stream, T[]! item) -> void
static Reloaded.Memory.Extensions.StringExtensions.Count(this string! text, char c) -> int
static Reloaded.Memory.Extensions.StringExtensions.DangerousGetReference(this string! text) -> char
static Reloaded.Memory.Extensions.StringExtensions.DangerousGetReferenceAt(this string! text, int i) -> char
static Reloaded.Memory.Extensions.StringExtensions.GetHashCodeFast(this string! text) -> nuint
static Reloaded.Memory.Extensions.StringExtensions.GetHashCodeFast(this System.ReadOnlySpan<char> text) -> nuint
static Reloaded.Memory.Interfaces.CanAllocateMemoryExtensions.AllocateDisposable<TAllocator>(this TAllocator allocator, nuint numBytes) -> Reloaded.Memory.Structs.DisposableMemoryAllocation<TAllocator>
static Reloaded.Memory.Interfaces.CanChangeMemoryProtectionExtensions.ChangeProtection<T>(this T item, nuint memoryAddress, int size, Reloaded.Memory.Enums.MemoryProtection newProtection) -> nuint
static Reloaded.Memory.Interfaces.CanChangeMemoryProtectionExtensions.ChangeProtectionDisposable<T>(this T item, nuint memoryAddress, int size, Reloaded.Memory.Enums.MemoryProtection newProtection) -> Reloaded.Memory.Structs.DisposableMemoryProtection<T>
static Reloaded.Memory.Interfaces.CanChangeMemoryProtectionExtensions.SafeRead<TMemory>(this TMemory item, nuint memoryAddress, System.Span<byte> data) -> void
static Reloaded.Memory.Interfaces.CanChangeMemoryProtectionExtensions.SafeWrite<TMemory>(this TMemory item, nuint memoryAddress, System.Span<byte> data) -> void
static Reloaded.Memory.Native.Unix.Posix.process_vm_readv_k32(nint processId, nuint localIov, nuint remoteIov, nuint numBytes) -> bool
static Reloaded.Memory.Native.Unix.Posix.process_vm_writev_k32(nint processId, nuint remoteIov, nuint localIov, nuint numBytes) -> bool
static Reloaded.Memory.Pointers.MarshalledPtr<T>.operator !=(Reloaded.Memory.Pointers.MarshalledPtr<T> left, Reloaded.Memory.Pointers.MarshalledPtr<T> right) -> bool
static Reloaded.Memory.Pointers.MarshalledPtr<T>.operator +(Reloaded.Memory.Pointers.MarshalledPtr<T> pointer, int offset) -> Reloaded.Memory.Pointers.MarshalledPtr<T>
static Reloaded.Memory.Pointers.MarshalledPtr<T>.operator ++(Reloaded.Memory.Pointers.MarshalledPtr<T> pointer) -> Reloaded.Memory.Pointers.MarshalledPtr<T>
static Reloaded.Memory.Pointers.MarshalledPtr<T>.operator -(Reloaded.Memory.Pointers.MarshalledPtr<T> pointer, int offset) -> Reloaded.Memory.Pointers.MarshalledPtr<T>
static Reloaded.Memory.Pointers.MarshalledPtr<T>.operator --(Reloaded.Memory.Pointers.MarshalledPtr<T> pointer) -> Reloaded.Memory.Pointers.MarshalledPtr<T>
static Reloaded.Memory.Pointers.MarshalledPtr<T>.operator ==(Reloaded.Memory.Pointers.MarshalledPtr<T> left, Reloaded.Memory.Pointers.MarshalledPtr<T> right) -> bool
static Reloaded.Memory.Pointers.MarshalledPtr<T>.operator false(Reloaded.Memory.Pointers.MarshalledPtr<T> operand) -> bool
static Reloaded.Memory.Pointers.MarshalledPtr<T>.operator true(Reloaded.Memory.Pointers.MarshalledPtr<T> operand) -> bool
static Reloaded.Memory.Pointers.Ptr<T>.implicit operator Reloaded.Memory.Pointers.Ptr<T>(T* operand) -> Reloaded.Memory.Pointers.Ptr<T>
static Reloaded.Memory.Pointers.Ptr<T>.implicit operator T*(Reloaded.Memory.Pointers.Ptr<T> operand) -> T*
static Reloaded.Memory.Pointers.Ptr<T>.operator !=(Reloaded.Memory.Pointers.Ptr<T> left, Reloaded.Memory.Pointers.Ptr<T> right) -> bool
static Reloaded.Memory.Pointers.Ptr<T>.operator +(Reloaded.Memory.Pointers.Ptr<T> pointer, int offset) -> Reloaded.Memory.Pointers.Ptr<T>
static Reloaded.Memory.Pointers.Ptr<T>.operator ++(Reloaded.Memory.Pointers.Ptr<T> pointer) -> Reloaded.Memory.Pointers.Ptr<T>
static Reloaded.Memory.Pointers.Ptr<T>.operator -(Reloaded.Memory.Pointers.Ptr<T> pointer, int offset) -> Reloaded.Memory.Pointers.Ptr<T>
static Reloaded.Memory.Pointers.Ptr<T>.operator --(Reloaded.Memory.Pointers.Ptr<T> pointer) -> Reloaded.Memory.Pointers.Ptr<T>
static Reloaded.Memory.Pointers.Ptr<T>.operator ==(Reloaded.Memory.Pointers.Ptr<T> left, Reloaded.Memory.Pointers.Ptr<T> right) -> bool
static Reloaded.Memory.Pointers.Ptr<T>.operator false(Reloaded.Memory.Pointers.Ptr<T> operand) -> bool
static Reloaded.Memory.Pointers.Ptr<T>.operator true(Reloaded.Memory.Pointers.Ptr<T> operand) -> bool
static Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>.operator !=(Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource> left, Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource> right) -> bool
static Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>.operator +(Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource> pointer, int offset) -> Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>
static Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>.operator ++(Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource> pointer) -> Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>
static Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>.operator -(Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource> pointer, int offset) -> Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>
static Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>.operator --(Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource> pointer) -> Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>
static Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>.operator ==(Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource> left, Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource> right) -> bool
static Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>.operator false(Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource> operand) -> bool
static Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource>.operator true(Reloaded.Memory.Pointers.Sourced.SourcedMarshalledPtr<T, TSource> operand) -> bool
static Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>.operator !=(Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource> left, Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource> right) -> bool
static Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>.operator +(Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource> pointer, int offset) -> Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>
static Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>.operator ++(Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource> pointer) -> Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>
static Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>.operator -(Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource> pointer, int offset) -> Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>
static Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>.operator --(Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource> pointer) -> Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>
static Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>.operator ==(Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource> left, Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource> right) -> bool
static Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>.operator false(Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource> operand) -> bool
static Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource>.operator true(Reloaded.Memory.Pointers.Sourced.SourcedPtr<T, TSource> operand) -> bool
static Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.implicit operator Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream!>(Reloaded.Memory.Streams.BufferedStreamReader<TStream!>! reader) -> Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream!>
static Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream>.implicit operator Reloaded.Memory.Streams.BufferedStreamReader<TStream!>!(Reloaded.Memory.Streams.BigEndianBufferedStreamReader<TStream!> reader) -> Reloaded.Memory.Streams.BufferedStreamReader<TStream!>!
static Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.implicit operator Reloaded.Memory.Streams.BufferedStreamReader<TStream!>!(Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream!> reader) -> Reloaded.Memory.Streams.BufferedStreamReader<TStream!>!
static Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream>.implicit operator Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream!>(Reloaded.Memory.Streams.BufferedStreamReader<TStream!>! reader) -> Reloaded.Memory.Streams.LittleEndianBufferedStreamReader<TStream!>
static Reloaded.Memory.Utilities.Box<T>.DangerousGetFrom(object! obj) -> Reloaded.Memory.Utilities.Box<T>!
static Reloaded.Memory.Utilities.Box<T>.GetFrom(object! obj) -> Reloaded.Memory.Utilities.Box<T>!
static Reloaded.Memory.Utilities.Box<T>.implicit operator Reloaded.Memory.Utilities.Box<T>!(T value) -> Reloaded.Memory.Utilities.Box<T>!
static Reloaded.Memory.Utilities.Box<T>.implicit operator T(Reloaded.Memory.Utilities.Box<T>! box) -> T
static Reloaded.Memory.Utilities.Box<T>.TryGetFrom(object! obj, out Reloaded.Memory.Utilities.Box<T>? box) -> bool
static Reloaded.Memory.Utilities.BoxExtensions.GetReference<T>(this Reloaded.Memory.Utilities.Box<T>! box) -> T
static Reloaded.Memory.Utilities.Endian.Reverse(byte value) -> byte
static Reloaded.Memory.Utilities.Endian.Reverse(double value) -> double
static Reloaded.Memory.Utilities.Endian.Reverse(float value) -> float
static Reloaded.Memory.Utilities.Endian.Reverse(int value) -> int
static Reloaded.Memory.Utilities.Endian.Reverse(long value) -> long
static Reloaded.Memory.Utilities.Endian.Reverse(sbyte value) -> sbyte
static Reloaded.Memory.Utilities.Endian.Reverse(short value) -> short
static Reloaded.Memory.Utilities.Endian.Reverse(uint value) -> uint
static Reloaded.Memory.Utilities.Endian.Reverse(ulong value) -> ulong
static Reloaded.Memory.Utilities.Endian.Reverse(ushort value) -> ushort
static Reloaded.Memory.Utilities.Endian.Reverse<T>(T value) -> T
static Reloaded.Memory.Utilities.ObjectMarshal.DangerousGetObjectDataByteOffset<T>(object! obj, ref T data) -> System.IntPtr
static Reloaded.Memory.Utilities.ObjectMarshal.DangerousGetObjectDataReferenceAt<T>(object! obj, System.IntPtr offset) -> T
static Reloaded.Memory.Utilities.ObjectMarshal.DangerousUnbox<T>(object! obj) -> T
static Reloaded.Memory.Utilities.ObjectMarshal.TryUnbox<T>(this object! obj, out T value) -> bool
static Reloaded.Memory.Utilities.TypeInfo.ApproximateIsBlittable(System.Type! type) -> bool
static Reloaded.Memory.Utilities.TypeInfo.ApproximateIsBlittable<T>() -> bool
static Reloaded.Memory.Utilities.TypeInfo.MarshalledSizeOf<T>() -> int
Reloaded.Memory.Utilities.ArrayRental<T>
Reloaded.Memory.Utilities.ArrayRental<T>.Array.get -> T[]!
Reloaded.Memory.Utilities.ArrayRental<T>.ArrayRental() -> void
Reloaded.Memory.Utilities.ArrayRental<T>.ArrayRental(int numBytes) -> void
Reloaded.Memory.Utilities.ArrayRental<T>.Dispose() -> void
Reloaded.Memory.Utilities.ArrayRental<T>.Span.get -> System.Span<T>
Reloaded.Memory.Utilities.ArrayRentalSlice<T>
Reloaded.Memory.Utilities.ArrayRentalSlice<T>.ArrayRentalSlice() -> void
Reloaded.Memory.Utilities.ArrayRentalSlice<T>.ArrayRentalSlice(Reloaded.Memory.Utilities.ArrayRental<T> rental, int length) -> void
Reloaded.Memory.Utilities.ArrayRentalSlice<T>.Dispose() -> void
Reloaded.Memory.Utilities.ArrayRentalSlice<T>.Length.get -> int
Reloaded.Memory.Utilities.ArrayRentalSlice<T>.Rental.get -> Reloaded.Memory.Utilities.ArrayRental<T>
Reloaded.Memory.Utilities.ArrayRentalSlice<T>.Span.get -> System.Span<T>
Reloaded.Memory.Extensions.EndianExtensions
static Reloaded.Memory.Extensions.EndianExtensions.AsBigEndian(this byte value) -> byte
static Reloaded.Memory.Extensions.EndianExtensions.AsBigEndian(this double value) -> double
static Reloaded.Memory.Extensions.EndianExtensions.AsBigEndian(this float value) -> float
static Reloaded.Memory.Extensions.EndianExtensions.AsBigEndian(this int value) -> int
static Reloaded.Memory.Extensions.EndianExtensions.AsBigEndian(this long value) -> long
static Reloaded.Memory.Extensions.EndianExtensions.AsBigEndian(this sbyte value) -> sbyte
static Reloaded.Memory.Extensions.EndianExtensions.AsBigEndian(this short value) -> short
static Reloaded.Memory.Extensions.EndianExtensions.AsBigEndian(this uint value) -> uint
static Reloaded.Memory.Extensions.EndianExtensions.AsBigEndian(this ulong value) -> ulong
static Reloaded.Memory.Extensions.EndianExtensions.AsBigEndian(this ushort value) -> ushort
static Reloaded.Memory.Extensions.EndianExtensions.AsBigEndian<T>(this T value) -> T
static Reloaded.Memory.Extensions.EndianExtensions.AsLittleEndian(this byte value) -> byte
static Reloaded.Memory.Extensions.EndianExtensions.AsLittleEndian(this double value) -> double
static Reloaded.Memory.Extensions.EndianExtensions.AsLittleEndian(this float value) -> float
static Reloaded.Memory.Extensions.EndianExtensions.AsLittleEndian(this int value) -> int
static Reloaded.Memory.Extensions.EndianExtensions.AsLittleEndian(this long value) -> long
static Reloaded.Memory.Extensions.EndianExtensions.AsLittleEndian(this sbyte value) -> sbyte
static Reloaded.Memory.Extensions.EndianExtensions.AsLittleEndian(this short value) -> short
static Reloaded.Memory.Extensions.EndianExtensions.AsLittleEndian(this uint value) -> uint
static Reloaded.Memory.Extensions.EndianExtensions.AsLittleEndian(this ulong value) -> ulong
static Reloaded.Memory.Extensions.EndianExtensions.AsLittleEndian(this ushort value) -> ushort
static Reloaded.Memory.Extensions.EndianExtensions.AsLittleEndian<T>(this T value) -> T
static Reloaded.Memory.Extensions.StringExtensions.GetHashCodeLowerFast(this string! text) -> nuint
static Reloaded.Memory.Extensions.StringExtensions.GetHashCodeLowerFast(this System.ReadOnlySpan<char> text) -> nuint
Reloaded.Memory.Exceptions.MemoryAllocationException.MemoryAllocationException() -> void
Reloaded.Memory.Exceptions.MemoryAllocationException.MemoryAllocationException(string! message, System.Exception! innerException) -> void
Reloaded.Memory.Exceptions.MemoryException.MemoryException() -> void
Reloaded.Memory.Exceptions.MemoryException.MemoryException(string! message, System.Exception! innerException) -> void
Reloaded.Memory.Exceptions.MemoryPermissionException.MemoryPermissionException() -> void
Reloaded.Memory.Exceptions.MemoryPermissionException.MemoryPermissionException(string! message, System.Exception! innerException) -> void
Reloaded.Memory.Utilities.CircularBufferStruct
Reloaded.Memory.Utilities.CircularBufferStruct.Add(byte* data, uint length) -> nuint
Reloaded.Memory.Utilities.CircularBufferStruct.Add<T>(T value) -> nuint
Reloaded.Memory.Utilities.CircularBufferStruct.Add<TSource, T>(TSource source, T value) -> nuint
Reloaded.Memory.Utilities.CircularBufferStruct.Add<TSource>(TSource source, byte* data, uint length) -> nuint
Reloaded.Memory.Utilities.CircularBufferStruct.CanItemFit(uint itemSize) -> Reloaded.Memory.Utilities.CircularBufferStruct.ItemFit
Reloaded.Memory.Utilities.CircularBufferStruct.CanItemFit<T>() -> Reloaded.Memory.Utilities.CircularBufferStruct.ItemFit
Reloaded.Memory.Utilities.CircularBufferStruct.CircularBufferStruct() -> void
Reloaded.Memory.Utilities.CircularBufferStruct.CircularBufferStruct(nuint start, int size) -> void
Reloaded.Memory.Utilities.CircularBufferStruct.Current.get -> nuint
Reloaded.Memory.Utilities.CircularBufferStruct.End.get -> nuint
Reloaded.Memory.Utilities.CircularBufferStruct.ItemFit
Reloaded.Memory.Utilities.CircularBufferStruct.ItemFit.No = 2 -> Reloaded.Memory.Utilities.CircularBufferStruct.ItemFit
Reloaded.Memory.Utilities.CircularBufferStruct.ItemFit.StartOfBuffer = 1 -> Reloaded.Memory.Utilities.CircularBufferStruct.ItemFit
Reloaded.Memory.Utilities.CircularBufferStruct.ItemFit.Yes = 0 -> Reloaded.Memory.Utilities.CircularBufferStruct.ItemFit
Reloaded.Memory.Utilities.CircularBufferStruct.Remaining.get -> nuint
Reloaded.Memory.Utilities.CircularBufferStruct.Size.get -> nuint
Reloaded.Memory.Utilities.CircularBufferStruct.Start.get -> nuint
static Reloaded.Memory.Native.Unix.Posix.process_vm_readv_k32_2(nint processId, nuint remoteIov, nuint localIov, nuint numBytes) -> bool
