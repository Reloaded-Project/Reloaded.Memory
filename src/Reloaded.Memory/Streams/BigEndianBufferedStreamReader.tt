<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<# 
    string[] types = { "Int16", "UInt16", "Int32", "UInt32", "Int64", "UInt64", "Single", "Double" };
#>

using System;
using System.Runtime.CompilerServices;
using System.Diagnostics.CodeAnalysis;

namespace Reloaded.Memory.Streams
{
    public partial class BufferedStreamReader : IDisposable
    {
<#
			foreach (var type in types)
			{
#>        
        /// <summary>
        /// Reads an unmanaged <#= type #> from the stream, swapping the endian of the output.
        /// </summary>
        /// <param name="value">The value to output.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
		[ExcludeFromCodeCoverage]
        public unsafe void ReadBigEndianPrimitive(out <#= type #> value)
        {
            int size = sizeof(<#= type #>);
            ReFillIfNecessary(size);

            value = *(<#= type #>*)(_gcHandlePtr + _bufferOffset);
            value = Memory.Endian.Reverse(value);

            _bufferOffset += size;
            _bufferedBytesRemaining -= size;
        }

        /// <summary>
		/// Reads an unmanaged <#= type #> from the stream, swapping the endian of the output.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
		[ExcludeFromCodeCoverage]
        public unsafe <#= type #> ReadBigEndianPrimitive<#= type #>()
        {
            ReadBigEndianPrimitive(out <#=type#> value);
            return value;
        }

		/// <summary>
        /// Reads an unmanaged  <#= type #> from the stream, swapping the endian of the output without incrementing the position.
        /// </summary>
        /// <param name="value">The value to output.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
		[ExcludeFromCodeCoverage]
        public unsafe void PeekBigEndianPrimitive(out <#= type #> value)
        {
            ReFillIfNecessary(sizeof(<#=type#>));

            value = *(<#= type #>*)(_gcHandlePtr + _bufferOffset);
            value = Memory.Endian.Reverse(value);
        }

        /// <summary>
        /// Reads an unmanaged  <#= type #> from the stream, swapping the endian of the output without incrementing the position.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
		[ExcludeFromCodeCoverage]
        public unsafe <#= type #> PeekBigEndianPrimitive<#= type #>()
        {
            PeekBigEndianPrimitive(out <#=type#> value);
            return value;
        }

<#
            } 
#>
    }
}
