<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>


<# 
    string[] types = { "Int16", "UInt16", "Int32", "UInt32", "Int64", "UInt64", "Single", "Double" };
#>

using System;
using System.IO;
using Reloaded.Memory.Shared.Generator;
using Reloaded.Memory.Shared.Structs;
using Reloaded.Memory.Tests.Memory.Helpers;
using Reloaded.Memory.Streams.Writers;
using Xunit;

namespace Reloaded.Memory.Tests.Memory.Streams
{
    public partial class ExtendedMemoryStream
    {
<#
		foreach (var type in types)
		{
#>
        /// <summary>
        /// Checks if the stream can write simple Big Endian primitives.
        /// </summary>
        [Fact]
        public void WriteBigEndian<#=type#>Array()
        {
            var integers = new Random<#=type#>Generator(1).Structs;
            using (var extendedStream = new BigEndianMemoryStream(new Reloaded.Memory.Streams.ExtendedMemoryStream()))
            {
                extendedStream.Write(integers);
                Reloaded.Memory.StructArray.FromArrayBigEndianPrimitive<<#=type#>>(extendedStream.ToArray(), out var newStructs);

                Assert.Equal(integers, newStructs);
            };
        }
<#
		}
#>

    }
}